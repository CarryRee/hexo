{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/2017:11:22_095845.jpeg","path":"img/2017:11:22_095845.jpeg","modified":0,"renderable":0},{"_id":"source/img/2017:11:9_152054.jpg","path":"img/2017:11:9_152054.jpg","modified":0,"renderable":0},{"_id":"source/img/2018:02:08_135005.jpg","path":"img/2018:02:08_135005.jpg","modified":0,"renderable":0},{"_id":"source/img/2018:02:08_134804.jpg","path":"img/2018:02:08_134804.jpg","modified":0,"renderable":0},{"_id":"source/img/2018:02:08_193010.jpg","path":"img/2018:02:08_193010.jpg","modified":0,"renderable":0},{"_id":"source/img/2018:02:09_112103.jpg","path":"img/2018:02:09_112103.jpg","modified":0,"renderable":0},{"_id":"source/img/2018:02:09_141205.jpg","path":"img/2018:02:09_141205.jpg","modified":0,"renderable":0},{"_id":"source/img/2017:11:22_094601.jpeg","path":"img/2017:11:22_094601.jpeg","modified":0,"renderable":0},{"_id":"source/img/2017:11:22_094901.jpeg","path":"img/2017:11:22_094901.jpeg","modified":0,"renderable":0},{"_id":"source/img/2017:11:22_101345.jpeg","path":"img/2017:11:22_101345.jpeg","modified":0,"renderable":0},{"_id":"source/img/2017:11:22_101645.jpeg","path":"img/2017:11:22_101645.jpeg","modified":0,"renderable":0},{"_id":"source/img/2018:01:20_160506.png","path":"img/2018:01:20_160506.png","modified":0,"renderable":0},{"_id":"source/img/2018:02:08_131102.jpg","path":"img/2018:02:08_131102.jpg","modified":0,"renderable":0},{"_id":"source/img/2018:02:08_131703.jpg","path":"img/2018:02:08_131703.jpg","modified":0,"renderable":0},{"_id":"source/img/2018:02:08_190309.jpg","path":"img/2018:02:08_190309.jpg","modified":0,"renderable":0},{"_id":"source/img/2018:02:09_110201.jpg","path":"img/2018:02:09_110201.jpg","modified":0,"renderable":0},{"_id":"source/img/2017:11:22_094701.jpeg","path":"img/2017:11:22_094701.jpeg","modified":0,"renderable":0},{"_id":"source/img/2017:11:22_094801.jpeg","path":"img/2017:11:22_094801.jpeg","modified":0,"renderable":0},{"_id":"source/img/2018:01:19_164701.jpg","path":"img/2018:01:19_164701.jpg","modified":0,"renderable":0},{"_id":"source/img/2018:01:20_155205.png","path":"img/2018:01:20_155205.png","modified":0,"renderable":0},{"_id":"source/img/2018:02:08_135106.jpg","path":"img/2018:02:08_135106.jpg","modified":0,"renderable":0},{"_id":"source/img/2018:02:09_110302.jpg","path":"img/2018:02:09_110302.jpg","modified":0,"renderable":0},{"_id":"source/img/2018:02:09_113004.jpg","path":"img/2018:02:09_113004.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"source/img/2017:11:22_095202.jpeg","path":"img/2017:11:22_095202.jpeg","modified":0,"renderable":0},{"_id":"source/img/2018:01:20_153303.png","path":"img/2018:01:20_153303.png","modified":0,"renderable":0},{"_id":"source/img/2018:01:20_154804.png","path":"img/2018:01:20_154804.png","modified":0,"renderable":0},{"_id":"source/img/2018:02:08_145301.jpg","path":"img/2018:02:08_145301.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":0,"renderable":1},{"_id":"source/img/2017:11:22_095701.jpeg","path":"img/2017:11:22_095701.jpeg","modified":0,"renderable":0},{"_id":"source/img/2018:02:08_164208.jpg","path":"img/2018:02:08_164208.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"source/img/2017:11:22_095801.jpeg","path":"img/2017:11:22_095801.jpeg","modified":0,"renderable":0},{"_id":"source/img/2018:01:20_101602.png","path":"img/2018:01:20_101602.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"source/img/2017:11:22_095901.jpeg","path":"img/2017:11:22_095901.jpeg","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"b9ec9f7dcfa49b7b42c0948bba10ee189b988580","modified":1500629532000},{"_id":"source/.DS_Store","hash":"c70c8d8c6cc916f45bc1442ef9661df2cabd362d","modified":1525833107289},{"_id":"themes/next/.DS_Store","hash":"0f52484dc3c00597412c8019acd62b937495f65c","modified":1499335186000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1499075226000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1499075226000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1499075226000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1499075226000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1499075226000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1499075226000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1499075226000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1499075226000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1499075226000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1499075226000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1499075226000},{"_id":"themes/next/bower.json","hash":"be0a430362cb73a7e3cf9ecf51a67edf8214b637","modified":1499075226000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1499075226000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1499075226000},{"_id":"themes/next/_config.yml","hash":"b886ee03a6bcb06aafa087aa7445fd439a3538c8","modified":1511349896658},{"_id":"themes/next/package.json","hash":"6b5bfec48776ddf9c03811b1ff2cb2b615eccc88","modified":1499075226000},{"_id":"source/_posts/CarryRee-s-blog.md","hash":"93dc768cec8654cfb8620e73a7278558887dee41","modified":1500628785000},{"_id":"source/_posts/.DS_Store","hash":"b95887ea23bba74c24b80b7911a168ea673c5081","modified":1525833102191},{"_id":"source/_posts/Interruption.md","hash":"26eb1ad9d3ac8dd18c70bda328b37a04d7032455","modified":1525833725872},{"_id":"source/_posts/animation.md","hash":"665c93ee2d81e7a7fb53903283f7fdd73e0ee8af","modified":1500861565000},{"_id":"source/_posts/framework.md","hash":"f08cb656a12d5b29126cad7a5640996ba2568b30","modified":1516438108022},{"_id":"source/_posts/hexoBackup.md","hash":"437fd6d1527540023ad63ed7a04cdcba111c863f","modified":1510213892125},{"_id":"source/_posts/memory.md","hash":"d1f5bfdca2adac9734e819059478877d78a9967f","modified":1501481430000},{"_id":"source/_posts/platform.md","hash":"1aa5f02ad0660ddef9ff86127889da9e4e785d53","modified":1516438020460},{"_id":"source/_posts/uploadGithub.md","hash":"dd036ef76d84a61de9e2c261109c170ff9c81c79","modified":1518143317676},{"_id":"source/_posts/uploadPod.md","hash":"b757aba0f0d741d34b32582dcc62bf8b24529162","modified":1518157355225},{"_id":"source/img/2017:11:22_095845.jpeg","hash":"420d286d6e1d545a9c60e6dd21baaf8e07d272a4","modified":1511271587809},{"_id":"source/img/2017:11:9_152054.jpg","hash":"87587bca8786476c93b7dce54ba3fd15831c9171","modified":1510211213228},{"_id":"source/img/.DS_Store","hash":"3b74f65e3c377d55ad6de95768d9497180b193e5","modified":1520257177767},{"_id":"source/img/2018:02:08_135005.jpg","hash":"09c8533bad0ba43beb5e46cf179fb7bef57fa508","modified":1518089256248},{"_id":"source/img/2018:02:08_134804.jpg","hash":"7f05c0151522d61ad95182e04dcef2b2b4a3baaa","modified":1518085837228},{"_id":"source/img/2018:02:08_193010.jpg","hash":"a8f07a4505933261ff0eb8e403e06550ec301f00","modified":1518089412397},{"_id":"source/img/2018:02:09_112103.jpg","hash":"ca9f83608a43c87aef534df9fcb3d53158100a88","modified":1518146469501},{"_id":"source/tags/index.md","hash":"570f1476665dc814be920be4c222e2a24d099b11","modified":1500630864000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1499075226000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1499074216000},{"_id":"source/img/2018:02:09_141205.jpg","hash":"2ef38eb71bf94ebcef34ad3757d37a9bc04e0557","modified":1518156692744},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1499075226000},{"_id":"themes/next/.git/packed-refs","hash":"458c1cd159bff8b80cb42d8eaca86fb4686a0982","modified":1499075226000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"fdd63b77472612337309eb93ec415a059b90756b","modified":1499075226000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1499075226000},{"_id":"themes/next/.git/index","hash":"7040d4a253b45dc3dad4495ccb20db1690fc5e6e","modified":1499075226000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1499075226000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1499075226000},{"_id":"themes/next/scripts/.DS_Store","hash":"6823da2ada782f9a2630bd3ef97fdf3cadffbd8b","modified":1499318240000},{"_id":"themes/next/layout/.DS_Store","hash":"fc7b18230957a822947fd7307fc7dcc62b04f1b8","modified":1499335155000},{"_id":"themes/next/layout/_layout.swig","hash":"a44305f8fa7fe9c80eb50c0696a704424b589750","modified":1499075226000},{"_id":"themes/next/layout/category.swig","hash":"82e7bc278559b4335ad974659104eaaf04863032","modified":1499075226000},{"_id":"themes/next/layout/archive.swig","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1499075226000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1499075226000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1499075226000},{"_id":"themes/next/layout/schedule.swig","hash":"f93c53f6fd5c712584f6efba6f770c30fa8a3e80","modified":1499075226000},{"_id":"themes/next/layout/page.swig","hash":"baa667bc801349d5c4984c0f172973d3780400df","modified":1499075226000},{"_id":"themes/next/layout/tag.swig","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1499075226000},{"_id":"themes/next/source/.DS_Store","hash":"296ffbfab05c7b837ca37bd6748a5b5716a5c115","modified":1499318572000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1499075226000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1499075226000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1499075226000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1499075226000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1499075226000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1499075226000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1499075226000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1499075226000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1499075226000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1499075226000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1499075226000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1499075226000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1499075226000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"526b7cb4abc5d77bdd8f22271fffc734a51a46c6","modified":1499335428000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1499075226000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1499075226000},{"_id":"source/img/2017:11:22_094601.jpeg","hash":"5850b77eec2995ad211c28c622cf1bbc3254498b","modified":1511254010426},{"_id":"source/img/2017:11:22_094901.jpeg","hash":"188b42ce963c391c35df8306df868d64ed2b4592","modified":1511256474681},{"_id":"source/img/2017:11:22_101345.jpeg","hash":"f19bcee16c9cdf7f9919e8356f4f3464a3943cd4","modified":1511316770566},{"_id":"source/img/2017:11:22_101645.jpeg","hash":"a4a01d5cd517e8adf4c180a46bb639d772951444","modified":1511316955156},{"_id":"source/img/2018:01:20_160506.png","hash":"a50dd00deded2aadff91fa5f1d29358638265cf4","modified":1516435527485},{"_id":"source/img/2018:02:08_131102.jpg","hash":"25fe10f8fdd47206f7d42e23b830a11f8c484a22","modified":1518087346556},{"_id":"source/img/2018:02:08_131703.jpg","hash":"fa1d14b74a28511ec55904cbb241701cc1c8ca34","modified":1518074226985},{"_id":"source/img/2018:02:08_190309.jpg","hash":"6adf3d432b3b95eef1437f9502ced1dd48f5372b","modified":1518087774394},{"_id":"source/img/2018:02:09_110201.jpg","hash":"89537d3e41eb8301367705d993b1ae9f2dc3aa3a","modified":1518144354703},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499075226000},{"_id":"source/img/2017:11:22_094701.jpeg","hash":"d24e829c3282bccc073de83a116a2f3d7af57597","modified":1511254758888},{"_id":"source/img/2017:11:22_094801.jpeg","hash":"b4c710beea3999e4b799db589588aa2f1dcf5ec6","modified":1511254962489},{"_id":"source/img/2018:01:19_164701.jpg","hash":"71c5755a93071abe67fa139e6fd96cc9b918ae15","modified":1516351464776},{"_id":"source/img/2018:01:20_155205.png","hash":"eb83c8032f4d7554e7ba92b4fae16ccffc878f9b","modified":1516434715132},{"_id":"source/img/2018:02:08_135106.jpg","hash":"c4a22401411d98949352a73b7ed4f37f644b68d6","modified":1518089314574},{"_id":"source/img/2018:02:09_110302.jpg","hash":"aa46907af130d6b1efb75853afe6200050e96633","modified":1518145284576},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1499074216000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1499074216000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1499074216000},{"_id":"source/img/2018:02:09_113004.jpg","hash":"43fae5c8114a87bc79517434a36a680d206065a2","modified":1518146961189},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1499074216000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1499074216000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1499074216000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1499074216000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1499074216000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1499074216000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1499074216000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1499074216000},{"_id":"themes/next/.git/logs/HEAD","hash":"5d5b08c962b3cf4affcd3c5140ff59b3089f00a3","modified":1499075226000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1499075226000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1499075226000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1499075226000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1499075226000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1499075226000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1499075226000},{"_id":"themes/next/scripts/tags/note.js","hash":"21b102db8a01c7b15ae2c0ea3ef3d4cf807ec6ed","modified":1499075226000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1499075226000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1499075226000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1499075226000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1499075226000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1499075226000},{"_id":"themes/next/layout/_macro/post.swig","hash":"9481f43ed356e00df7b519e92ad0becebc9e1505","modified":1499075226000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1499075226000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1499075226000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1499075226000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a2b213c1a7c37cd6e4749f2018371f4c1f4f0d23","modified":1499075226000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1499075226000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"1c7d3c975e499b9aa3119d6724b030b7b00fc87e","modified":1499075226000},{"_id":"themes/next/layout/_partials/.DS_Store","hash":"99c7e35ef78f85c94aa732e00cecc78b20f0a5b5","modified":1499318942000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"b43373ddba47f556f0566286598d82bbe4ebf723","modified":1499335703000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6a7eb93d8aa7d4baa472890bd666b921f449d8af","modified":1499075226000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1499075226000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1499075226000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1499075226000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1499075226000},{"_id":"themes/next/layout/_third-party/.DS_Store","hash":"f0bce10ab124f0351d5caf818a9d5c212c1c43bc","modified":1499318935000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1499075226000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1499075226000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1499075226000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1499075226000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1499075226000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1499075226000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1499075226000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1499075226000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1499075226000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1499075226000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1499075226000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1499075226000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1499075226000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1499075226000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1499075226000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1499075226000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1499075226000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1499075226000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1499075226000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1499075226000},{"_id":"themes/next/source/css/.DS_Store","hash":"80bc5b19ea7955e0217a3911a4f4b71a73c3bf82","modified":1499318572000},{"_id":"themes/next/source/uploads/.DS_Store","hash":"bd6ff8eb7f455e9a39dfed4c1ce4e04a486805d7","modified":1499077386000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1499075226000},{"_id":"source/img/2017:11:22_095202.jpeg","hash":"1ec0732b30d7f305d1c1dec5139e2d5264a2c82a","modified":1511256183845},{"_id":"source/img/2018:01:20_153303.png","hash":"03f0cbc68db9a7f585f5cdf17d27d6c82670bbf9","modified":1516433558041},{"_id":"source/img/2018:01:20_154804.png","hash":"bd90cfcfa073b620f7b8ef5d7edf060185979f70","modified":1516434470253},{"_id":"source/img/2018:02:08_145301.jpg","hash":"6f0bdd8d964921c7b4af7efcdf6f1e7417110d04","modified":1518073605046},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499075226000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499075226000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499075226000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499075226000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499075226000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499075226000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499075226000},{"_id":"themes/next/source/uploads/avatar.jpg","hash":"e64570ea958477c98ce203ae4d3fe2c263b1a594","modified":1499077306000},{"_id":"source/img/2017:11:22_095701.jpeg","hash":"5631b520e50898bd8385c0e98eb7afaa0bb4efb1","modified":1511269471101},{"_id":"source/img/2018:02:08_164208.jpg","hash":"7f361307c9084ee30397387e9f2fd055f8dba056","modified":1518079292984},{"_id":"themes/next/.git/refs/heads/master","hash":"6aa1413002cbbd42cb24949b4a0d415f03c0137b","modified":1499075226000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1499075226000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1499075226000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1499075226000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1499075226000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1499075226000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1499075226000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1499075226000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1499075226000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1499075226000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1499075226000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1499075226000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1499075226000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1499075226000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1499075226000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1499075226000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1499075226000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1499075226000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1499075226000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1499075226000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1499075226000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1499075226000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1499075226000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1499075226000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1499075226000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1499075226000},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1499075226000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1499075226000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"abb92620197a16ed2c0775edf18a0f044a82256e","modified":1499075226000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1d0d01aaeb7bcde3671263d736718f8837c20182","modified":1499075226000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1499075226000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1499075226000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1499075226000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1499075226000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1499075226000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1499075226000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1499075226000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1499075226000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1499075226000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1499075226000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1499075226000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1499075226000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1499075226000},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1499075226000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1499075226000},{"_id":"themes/next/source/js/src/utils.js","hash":"b2ea56de27fddc6d9118051da384f781cd93951d","modified":1499075226000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1499075226000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1499075226000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1499075226000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1499075226000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1499075226000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1499075226000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1499075226000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1499075226000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1499075226000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1499075226000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1499075226000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1499075226000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1499075226000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1499075226000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1499075226000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1499075226000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1499075226000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1499075226000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1499075226000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1499075226000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1499075226000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1499075226000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1499075226000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1499075226000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1499075226000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1499075226000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1499075226000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1499075226000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1499075226000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1499075226000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1499075226000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1499075226000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1499075226000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1499075226000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1499075226000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1499075226000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1499075226000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1499075226000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1499075226000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1499075226000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1499075226000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1499075226000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1499075226000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1499075226000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1499075226000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1499075226000},{"_id":"themes/next/source/css/_schemes/.DS_Store","hash":"cecef42e6f50c52438e3b8321210074119aee978","modified":1499075890000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1499075226000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1499075226000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d6a793bcada68d4b6c58392546bc48a482e4a7d3","modified":1499075226000},{"_id":"source/img/2017:11:22_095801.jpeg","hash":"136d35c33543f32b68e7d76ab5c6ad3cfe1df601","modified":1511270649234},{"_id":"source/img/2018:01:20_101602.png","hash":"cdcc43b8591d069f0df2e5570db64362881d300c","modified":1516415164886},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1499075226000},{"_id":"source/img/2017:11:22_095901.jpeg","hash":"499c9bd4e6a6c981358876900cc10172e168cbdc","modified":1511271909144},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"5d5b08c962b3cf4affcd3c5140ff59b3089f00a3","modified":1499075226000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1499075226000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1499075226000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1499075226000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1499075226000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1499075226000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1499075226000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1499075226000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1499075226000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1499075226000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1499075226000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1499075226000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1499075226000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1499075226000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1499075226000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1499075226000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1499075226000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1499075226000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1499075226000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1499075226000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1499075226000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1499075226000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1499075226000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1499075226000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1499075226000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1499075226000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1499075226000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1499075226000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1499075226000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1499075226000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1499075226000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1499075226000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1499075226000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1499075226000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1499075226000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1499075226000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1499075226000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1499075226000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1499075226000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1499075226000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1499075226000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1499075226000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1499075226000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1499075226000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1499075226000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1499075226000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1499075226000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1499075226000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1499075226000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1499075226000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1499075226000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1499075226000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"5d5b08c962b3cf4affcd3c5140ff59b3089f00a3","modified":1499075226000},{"_id":"themes/next/.git/objects/pack/pack-247ff935991237da96b0d2547cfe24db36337a1f.idx","hash":"97d0654f8240631cdb688913b85184a21fdb8574","modified":1499075225000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1499075226000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1499075226000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1499075226000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1499075226000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1499075226000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1499075226000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1499075226000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1499075226000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1499075226000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1499075226000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1499075226000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1499075226000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"dfc86d37f5b580977d82af6ef835082d09a0c499","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"468bc734f47209096588ef1a8e55e60a3b12aa63","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"bb3be8374c31c372ed0995bd8030d2b920d581de","modified":1499075226000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1499075226000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1499075226000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1499075226000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1499075226000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1499075226000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1499075226000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1499075226000},{"_id":"themes/next/.git/objects/pack/pack-247ff935991237da96b0d2547cfe24db36337a1f.pack","hash":"0edea030fe653e704154c027c2df813b73cd8260","modified":1499075225000},{"_id":"public/atom.xml","hash":"581654589e3eca0e166b88a70aa619211d47ec30","modified":1525833738010},{"_id":"public/tags/index.html","hash":"c3f5dd2316ce1d12b3792cc32537bb7752167641","modified":1525833276746},{"_id":"public/2017/11/09/hexoBackup/index.html","hash":"e082498797dc269de9a2ae7a5d06c8abcfee25f1","modified":1525833276746},{"_id":"public/2017/07/21/animation/index.html","hash":"345c04adb6d8a220db92c66fae95a8ed8aa97061","modified":1525833276746},{"_id":"public/2017/07/03/CarryRee-s-blog/index.html","hash":"50320bab0977daec38544976e1dfcaf45c1fbf79","modified":1525833276746},{"_id":"public/archives/index.html","hash":"02a77c55035f6f4d76d7949796c9ce82b7256f61","modified":1525833276747},{"_id":"public/archives/2017/index.html","hash":"8ed57ae641a22fcb56b42fc5a51e1dfbc7de20aa","modified":1525833276747},{"_id":"public/archives/2017/07/index.html","hash":"3bd96b3a44447161801fc938a924dc40b42bcf76","modified":1525833276747},{"_id":"public/archives/2017/11/index.html","hash":"7a7e39b57bd7300c757d4cf253e6c2841aa46dba","modified":1525833276747},{"_id":"public/archives/2018/index.html","hash":"5051812302a159cda8223e40471e4bb6efa17c35","modified":1525833276747},{"_id":"public/archives/2018/01/index.html","hash":"93bd91bff5cf6e9e925119b20f79e178ac0fef52","modified":1525833276747},{"_id":"public/archives/2018/02/index.html","hash":"6bea0c183c47095c602eed1dae50ec9f5f268223","modified":1525833276747},{"_id":"public/tags/动画-内存管理/index.html","hash":"7582b0eaf767414c76798463f6dd893ff40b7c51","modified":1525833276747},{"_id":"public/tags/静态库/index.html","hash":"052c37d408017cb42b75e5dac2d1e94177311031","modified":1525833276747},{"_id":"public/tags/内存管理-block/index.html","hash":"208e0ad5593fa5a55fc882cfa0412b606ae39da6","modified":1525833276747},{"_id":"public/tags/Framework/index.html","hash":"0c3ce5bd1d741db14f9cc8db35236d23afaf8191","modified":1525833276748},{"_id":"public/2018/02/09/uploadPod/index.html","hash":"7bb902b7491cf6e6b02377677f5ceaaa5b1d5d3e","modified":1525833276748},{"_id":"public/2018/02/08/uploadGithub/index.html","hash":"4d79a5946e7b4ddfdf95f02d258314e8e2c3ffee","modified":1525833276748},{"_id":"public/2018/01/20/framework/index.html","hash":"42019bdf5608883a0a586c4591a391c22fb94d53","modified":1525833276748},{"_id":"public/2017/11/22/platform/index.html","hash":"afe5ad1051ac1e5f35bdaefbbe99fdc05e05745f","modified":1525833276748},{"_id":"public/2017/07/28/memory/index.html","hash":"7150fcf341e9469f589c7072e383255aab45daf4","modified":1525833276748},{"_id":"public/index.html","hash":"b32134f2d59ee5b38bc202ba5828534d2dba1640","modified":1525833738019},{"_id":"public/archives/2018/05/index.html","hash":"220ff1594c3fe47ac1da1dd9bc923b91aafeb8b3","modified":1525833276750},{"_id":"public/2018/05/09/Interruption/index.html","hash":"cb63eb2cf04204441ba7fa121ef27a880bd97aba","modified":1525833738019}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2017-07-21T09:50:51.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-07-21 17:50:51\ntype: \"tags\"\n---\n","updated":"2017-07-21T09:54:24.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjgyhmkwo000h0ecvdnc9jh31","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"CarryRee-s-blog","date":"2017-07-03T02:59:37.000Z","_content":"博客成功搭建纪念一下\n--\n","source":"_posts/CarryRee-s-blog.md","raw":"---\ntitle: CarryRee-s-blog\ndate: 2017-07-03 10:59:37\ntags:\n---\n博客成功搭建纪念一下\n--\n","slug":"CarryRee-s-blog","published":1,"updated":"2017-07-21T09:19:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgyhmkpr00000ecvd4qwodh7","content":"<h2 id=\"博客成功搭建纪念一下\"><a href=\"#博客成功搭建纪念一下\" class=\"headerlink\" title=\"博客成功搭建纪念一下\"></a>博客成功搭建纪念一下</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"博客成功搭建纪念一下\"><a href=\"#博客成功搭建纪念一下\" class=\"headerlink\" title=\"博客成功搭建纪念一下\"></a>博客成功搭建纪念一下</h2>"},{"title":"CABasicAnimation 内存不释放问题","date":"2017-07-21T09:01:53.000Z","_content":"CABasicAnimation 内存不释放问题\n--\n\n最近在项目遇到一个问题就是，在页面dismissViewController后发现该页面没有被释放，仔细查阅后，发现页面用了CABasicAnimation的removedOnCompletion = NO会导致不被释放，应该在dismissViewController之前调用removeAnimationForKey\n\n- - -\n\n**原因**：\nremovedOnCompletion 默认为YES，代表动画执行完毕后就从图层上移除，图形会恢复到动画执行前的状态。如果想让图层保持显示动画执行后的状态,那就设置为NO，也就是说图层一直在从而导致图层未释放。\n\n**解决**：\n在界面结束之前先手动调用removeAnimationForKey\n\n\n","source":"_posts/animation.md","raw":"---\ntitle: CABasicAnimation 内存不释放问题\ndate: 2017-07-21 17:01:53\ntags: 动画 内存管理\ncategories: \n---\nCABasicAnimation 内存不释放问题\n--\n\n最近在项目遇到一个问题就是，在页面dismissViewController后发现该页面没有被释放，仔细查阅后，发现页面用了CABasicAnimation的removedOnCompletion = NO会导致不被释放，应该在dismissViewController之前调用removeAnimationForKey\n\n- - -\n\n**原因**：\nremovedOnCompletion 默认为YES，代表动画执行完毕后就从图层上移除，图形会恢复到动画执行前的状态。如果想让图层保持显示动画执行后的状态,那就设置为NO，也就是说图层一直在从而导致图层未释放。\n\n**解决**：\n在界面结束之前先手动调用removeAnimationForKey\n\n\n","slug":"animation","published":1,"updated":"2017-07-24T01:59:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgyhmkpv00010ecvx5nwvfpn","content":"<h2 id=\"CABasicAnimation-内存不释放问题\"><a href=\"#CABasicAnimation-内存不释放问题\" class=\"headerlink\" title=\"CABasicAnimation 内存不释放问题\"></a>CABasicAnimation 内存不释放问题</h2><p>最近在项目遇到一个问题就是，在页面dismissViewController后发现该页面没有被释放，仔细查阅后，发现页面用了CABasicAnimation的removedOnCompletion = NO会导致不被释放，应该在dismissViewController之前调用removeAnimationForKey</p>\n<hr>\n<p><strong>原因</strong>：<br>removedOnCompletion 默认为YES，代表动画执行完毕后就从图层上移除，图形会恢复到动画执行前的状态。如果想让图层保持显示动画执行后的状态,那就设置为NO，也就是说图层一直在从而导致图层未释放。</p>\n<p><strong>解决</strong>：<br>在界面结束之前先手动调用removeAnimationForKey</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CABasicAnimation-内存不释放问题\"><a href=\"#CABasicAnimation-内存不释放问题\" class=\"headerlink\" title=\"CABasicAnimation 内存不释放问题\"></a>CABasicAnimation 内存不释放问题</h2><p>最近在项目遇到一个问题就是，在页面dismissViewController后发现该页面没有被释放，仔细查阅后，发现页面用了CABasicAnimation的removedOnCompletion = NO会导致不被释放，应该在dismissViewController之前调用removeAnimationForKey</p>\n<hr>\n<p><strong>原因</strong>：<br>removedOnCompletion 默认为YES，代表动画执行完毕后就从图层上移除，图形会恢复到动画执行前的状态。如果想让图层保持显示动画执行后的状态,那就设置为NO，也就是说图层一直在从而导致图层未释放。</p>\n<p><strong>解决</strong>：<br>在界面结束之前先手动调用removeAnimationForKey</p>\n"},{"title":"Interruption","date":"2018-05-09T02:19:20.000Z","_content":"\n# iOS监听中断方法\n\n有时候播放音乐的时候会被电话或打开其他播放器，这个时候声音会被抢占，这个时候则需要监听中断\n\n## 注册通知\n```\n[[NSNotificationCenter defaultCenter] addObserver:self\n                                         selector:@selector(audioSessionInterruptionNotification:)\n                                             name:AVAudioSessionInterruptionNotification\n                                           object:nil];\n\n```\n\n## 通知方法\n```\n// 监听中断通知调用的方法\n- (void)audioSessionInterruptionNotification:(NSNotification *)notification {\n    int type = [notification.userInfo[AVAudioSessionInterruptionOptionKey] intValue];\n\n    switch (type) {\n        case AVAudioSessionInterruptionTypeBegan: // 被打断\n            break;\n        case AVAudioSessionInterruptionTypeEnded: // 中断结束\n            break;\n        default:\n            break;\n    }\n}\n```\n","source":"_posts/Interruption.md","raw":"---\ntitle: Interruption\ndate: 2018-05-09 10:19:20\ntags:\n---\n\n# iOS监听中断方法\n\n有时候播放音乐的时候会被电话或打开其他播放器，这个时候声音会被抢占，这个时候则需要监听中断\n\n## 注册通知\n```\n[[NSNotificationCenter defaultCenter] addObserver:self\n                                         selector:@selector(audioSessionInterruptionNotification:)\n                                             name:AVAudioSessionInterruptionNotification\n                                           object:nil];\n\n```\n\n## 通知方法\n```\n// 监听中断通知调用的方法\n- (void)audioSessionInterruptionNotification:(NSNotification *)notification {\n    int type = [notification.userInfo[AVAudioSessionInterruptionOptionKey] intValue];\n\n    switch (type) {\n        case AVAudioSessionInterruptionTypeBegan: // 被打断\n            break;\n        case AVAudioSessionInterruptionTypeEnded: // 中断结束\n            break;\n        default:\n            break;\n    }\n}\n```\n","slug":"Interruption","published":1,"updated":"2018-05-09T02:42:05.872Z","_id":"cjgyhmkpx00020ecvq8ieq757","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"iOS监听中断方法\"><a href=\"#iOS监听中断方法\" class=\"headerlink\" title=\"iOS监听中断方法\"></a>iOS监听中断方法</h1><p>有时候播放音乐的时候会被电话或打开其他播放器，这个时候声音会被抢占，这个时候则需要监听中断</p>\n<h2 id=\"注册通知\"><a href=\"#注册通知\" class=\"headerlink\" title=\"注册通知\"></a>注册通知</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[NSNotificationCenter defaultCenter] addObserver:self</div><div class=\"line\">                                         selector:@selector(audioSessionInterruptionNotification:)</div><div class=\"line\">                                             name:AVAudioSessionInterruptionNotification</div><div class=\"line\">                                           object:nil];</div></pre></td></tr></table></figure>\n<h2 id=\"通知方法\"><a href=\"#通知方法\" class=\"headerlink\" title=\"通知方法\"></a>通知方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 监听中断通知调用的方法</div><div class=\"line\">- (void)audioSessionInterruptionNotification:(NSNotification *)notification &#123;</div><div class=\"line\">    int type = [notification.userInfo[AVAudioSessionInterruptionOptionKey] intValue];</div><div class=\"line\"></div><div class=\"line\">    switch (type) &#123;</div><div class=\"line\">        case AVAudioSessionInterruptionTypeBegan: // 被打断</div><div class=\"line\">            break;</div><div class=\"line\">        case AVAudioSessionInterruptionTypeEnded: // 中断结束</div><div class=\"line\">            break;</div><div class=\"line\">        default:</div><div class=\"line\">            break;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"iOS监听中断方法\"><a href=\"#iOS监听中断方法\" class=\"headerlink\" title=\"iOS监听中断方法\"></a>iOS监听中断方法</h1><p>有时候播放音乐的时候会被电话或打开其他播放器，这个时候声音会被抢占，这个时候则需要监听中断</p>\n<h2 id=\"注册通知\"><a href=\"#注册通知\" class=\"headerlink\" title=\"注册通知\"></a>注册通知</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[NSNotificationCenter defaultCenter] addObserver:self</div><div class=\"line\">                                         selector:@selector(audioSessionInterruptionNotification:)</div><div class=\"line\">                                             name:AVAudioSessionInterruptionNotification</div><div class=\"line\">                                           object:nil];</div></pre></td></tr></table></figure>\n<h2 id=\"通知方法\"><a href=\"#通知方法\" class=\"headerlink\" title=\"通知方法\"></a>通知方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 监听中断通知调用的方法</div><div class=\"line\">- (void)audioSessionInterruptionNotification:(NSNotification *)notification &#123;</div><div class=\"line\">    int type = [notification.userInfo[AVAudioSessionInterruptionOptionKey] intValue];</div><div class=\"line\"></div><div class=\"line\">    switch (type) &#123;</div><div class=\"line\">        case AVAudioSessionInterruptionTypeBegan: // 被打断</div><div class=\"line\">            break;</div><div class=\"line\">        case AVAudioSessionInterruptionTypeEnded: // 中断结束</div><div class=\"line\">            break;</div><div class=\"line\">        default:</div><div class=\"line\">            break;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"iOS Framework 静态库制作","date":"2018-01-20T08:08:57.000Z","_content":"\n## 工程创建\n1.打开Xcode -> Create a new Xcode project,然后选择如图的Cocoa Touch Framework, 选择语言、填好包名，组织名\n![outputScreen](/img/2018:01:19_164701.jpg)\n\n2.工程的Targets下的配置General -> Deployment Info下的Deplayment Target 设置使用的最低版本，我们就设置成9.0便于说明\n\n3.工程的Targets下的配置Build Settings -> Linking下的Mach-O type 设置为Static Library\n![outputScreen](/img/2018:01:20_101602.png)\n\n## 代码示例\n1.新建三个类test1、test2、test3\n代码基本如下：\n\n```\n@interface Test1 : NSObject\n\n- (void)print;\n\n@end\n```\ntest2、test3同理\n\n2.然后设置test1.h和test1.m完全对外公开、Test2.h公开，test2.m隐蔽、test3.h和test3.m不对外公开\n\n3.工程的Targets下的配置Build Phases -> Headers下的文件根据上面所示，如下设置，\n注意：新建一个类的时候，默认Project会默认对应该类的头文件，如果需要完全公开，.m也要对外的话，点击下面的“+”,添加.m，然后将其拖到Public之中,要对外的都放入Public，不对外的放入Project；\n![outputScreen](/img/2018:01:20_153303.png)\n\n## 生成真机和模拟器合并framework\n问题：framework如果选择真机运行Products会生成真机framework，只能在真机运行，不能再模拟器运行，同理如果选择模拟器运行Products会生成模拟器framework，只能在模拟器运行，不能在真机运行；\n\n为了解决以上问题，我们可以通过脚本生成生成真机和模拟器合并framework\n\n1.Xcode -> File -> Target -> Cross-platform 下面的 other 点击 Aggregate 然后输入了脚本名EMAggregate\n![outputScreen](/img/2018:01:20_154804.png)\n\n2.工程的Targets下EMAggregate 的 Build Phases 点击左上角“+”，选择New Run Script Phase;\n![outputScreen](/img/2018:01:20_155205.png)\n\n3.添加如下代码：\n\n```\n# Sets the target folders and the final framework product.\n\n# 如果工程名称和Framework的Target名称不一样的话，要自定义FMKNAME\n\n# 例如: FMK_NAME = \"MyFramework\"\n\nFMK_NAME=${PROJECT_NAME}\n\n# Install dir will be the final output to the framework.\n\n# The following line create it in the root folder of the current project.\n\nINSTALL_DIR=${SRCROOT}/Products/${FMK_NAME}.framework\n\n# Working dir will be deleted after the framework creation.\n\nWRK_DIR=build\n\nDEVICE_DIR=${WRK_DIR}/Release-iphoneos/${FMK_NAME}.framework\n\nSIMULATOR_DIR=${WRK_DIR}/Release-iphonesimulator/${FMK_NAME}.framework\n\n# -configuration ${CONFIGURATION}\n\n# Clean and Building both architectures.\n\nxcodebuild -configuration \"Release\" -target \"${FMK_NAME}\" -sdk iphoneos clean build\n\nxcodebuild -configuration \"Release\" -target \"${FMK_NAME}\" -sdk iphonesimulator clean build\n\n# Cleaning the oldest.\n\nif [ -d \"${INSTALL_DIR}\" ]\n\nthen\n\nrm -rf \"${INSTALL_DIR}\"\n\nfi\n\nmkdir -p \"${INSTALL_DIR}\"\n\ncp -R \"${DEVICE_DIR}/\" \"${INSTALL_DIR}/\"\n\n# Uses the Lipo Tool to merge both binary files (i386 + armv6/armv7) into one Universal final product.\n\nlipo -create \"${DEVICE_DIR}/${FMK_NAME}\" \"${SIMULATOR_DIR}/${FMK_NAME}\" -output \"${INSTALL_DIR}/${FMK_NAME}\"\n\nrm -r \"${WRK_DIR}\"\n\nopen \"${INSTALL_DIR}\"\n\n```\n\n4.运行EMAggregate，然后就会在该工程旁边生成目录Products，里面就是合并的\n![outputScreen](/img/2018:01:20_160506.png)\n","source":"_posts/framework.md","raw":"---\ntitle: iOS Framework 静态库制作\ndate: 2018-01-20 16:08:57\ntags: 静态库\ncategories: \n---\n\n## 工程创建\n1.打开Xcode -> Create a new Xcode project,然后选择如图的Cocoa Touch Framework, 选择语言、填好包名，组织名\n![outputScreen](/img/2018:01:19_164701.jpg)\n\n2.工程的Targets下的配置General -> Deployment Info下的Deplayment Target 设置使用的最低版本，我们就设置成9.0便于说明\n\n3.工程的Targets下的配置Build Settings -> Linking下的Mach-O type 设置为Static Library\n![outputScreen](/img/2018:01:20_101602.png)\n\n## 代码示例\n1.新建三个类test1、test2、test3\n代码基本如下：\n\n```\n@interface Test1 : NSObject\n\n- (void)print;\n\n@end\n```\ntest2、test3同理\n\n2.然后设置test1.h和test1.m完全对外公开、Test2.h公开，test2.m隐蔽、test3.h和test3.m不对外公开\n\n3.工程的Targets下的配置Build Phases -> Headers下的文件根据上面所示，如下设置，\n注意：新建一个类的时候，默认Project会默认对应该类的头文件，如果需要完全公开，.m也要对外的话，点击下面的“+”,添加.m，然后将其拖到Public之中,要对外的都放入Public，不对外的放入Project；\n![outputScreen](/img/2018:01:20_153303.png)\n\n## 生成真机和模拟器合并framework\n问题：framework如果选择真机运行Products会生成真机framework，只能在真机运行，不能再模拟器运行，同理如果选择模拟器运行Products会生成模拟器framework，只能在模拟器运行，不能在真机运行；\n\n为了解决以上问题，我们可以通过脚本生成生成真机和模拟器合并framework\n\n1.Xcode -> File -> Target -> Cross-platform 下面的 other 点击 Aggregate 然后输入了脚本名EMAggregate\n![outputScreen](/img/2018:01:20_154804.png)\n\n2.工程的Targets下EMAggregate 的 Build Phases 点击左上角“+”，选择New Run Script Phase;\n![outputScreen](/img/2018:01:20_155205.png)\n\n3.添加如下代码：\n\n```\n# Sets the target folders and the final framework product.\n\n# 如果工程名称和Framework的Target名称不一样的话，要自定义FMKNAME\n\n# 例如: FMK_NAME = \"MyFramework\"\n\nFMK_NAME=${PROJECT_NAME}\n\n# Install dir will be the final output to the framework.\n\n# The following line create it in the root folder of the current project.\n\nINSTALL_DIR=${SRCROOT}/Products/${FMK_NAME}.framework\n\n# Working dir will be deleted after the framework creation.\n\nWRK_DIR=build\n\nDEVICE_DIR=${WRK_DIR}/Release-iphoneos/${FMK_NAME}.framework\n\nSIMULATOR_DIR=${WRK_DIR}/Release-iphonesimulator/${FMK_NAME}.framework\n\n# -configuration ${CONFIGURATION}\n\n# Clean and Building both architectures.\n\nxcodebuild -configuration \"Release\" -target \"${FMK_NAME}\" -sdk iphoneos clean build\n\nxcodebuild -configuration \"Release\" -target \"${FMK_NAME}\" -sdk iphonesimulator clean build\n\n# Cleaning the oldest.\n\nif [ -d \"${INSTALL_DIR}\" ]\n\nthen\n\nrm -rf \"${INSTALL_DIR}\"\n\nfi\n\nmkdir -p \"${INSTALL_DIR}\"\n\ncp -R \"${DEVICE_DIR}/\" \"${INSTALL_DIR}/\"\n\n# Uses the Lipo Tool to merge both binary files (i386 + armv6/armv7) into one Universal final product.\n\nlipo -create \"${DEVICE_DIR}/${FMK_NAME}\" \"${SIMULATOR_DIR}/${FMK_NAME}\" -output \"${INSTALL_DIR}/${FMK_NAME}\"\n\nrm -r \"${WRK_DIR}\"\n\nopen \"${INSTALL_DIR}\"\n\n```\n\n4.运行EMAggregate，然后就会在该工程旁边生成目录Products，里面就是合并的\n![outputScreen](/img/2018:01:20_160506.png)\n","slug":"framework","published":1,"updated":"2018-01-20T08:48:28.022Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgyhmkq000040ecv6ewr7lr8","content":"<h2 id=\"工程创建\"><a href=\"#工程创建\" class=\"headerlink\" title=\"工程创建\"></a>工程创建</h2><p>1.打开Xcode -&gt; Create a new Xcode project,然后选择如图的Cocoa Touch Framework, 选择语言、填好包名，组织名<br><img src=\"/img/2018:01:19_164701.jpg\" alt=\"outputScreen\"></p>\n<p>2.工程的Targets下的配置General -&gt; Deployment Info下的Deplayment Target 设置使用的最低版本，我们就设置成9.0便于说明</p>\n<p>3.工程的Targets下的配置Build Settings -&gt; Linking下的Mach-O type 设置为Static Library<br><img src=\"/img/2018:01:20_101602.png\" alt=\"outputScreen\"></p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><p>1.新建三个类test1、test2、test3<br>代码基本如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@interface Test1 : NSObject</div><div class=\"line\"></div><div class=\"line\">- (void)print;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p>test2、test3同理</p>\n<p>2.然后设置test1.h和test1.m完全对外公开、Test2.h公开，test2.m隐蔽、test3.h和test3.m不对外公开</p>\n<p>3.工程的Targets下的配置Build Phases -&gt; Headers下的文件根据上面所示，如下设置，<br>注意：新建一个类的时候，默认Project会默认对应该类的头文件，如果需要完全公开，.m也要对外的话，点击下面的“+”,添加.m，然后将其拖到Public之中,要对外的都放入Public，不对外的放入Project；<br><img src=\"/img/2018:01:20_153303.png\" alt=\"outputScreen\"></p>\n<h2 id=\"生成真机和模拟器合并framework\"><a href=\"#生成真机和模拟器合并framework\" class=\"headerlink\" title=\"生成真机和模拟器合并framework\"></a>生成真机和模拟器合并framework</h2><p>问题：framework如果选择真机运行Products会生成真机framework，只能在真机运行，不能再模拟器运行，同理如果选择模拟器运行Products会生成模拟器framework，只能在模拟器运行，不能在真机运行；</p>\n<p>为了解决以上问题，我们可以通过脚本生成生成真机和模拟器合并framework</p>\n<p>1.Xcode -&gt; File -&gt; Target -&gt; Cross-platform 下面的 other 点击 Aggregate 然后输入了脚本名EMAggregate<br><img src=\"/img/2018:01:20_154804.png\" alt=\"outputScreen\"></p>\n<p>2.工程的Targets下EMAggregate 的 Build Phases 点击左上角“+”，选择New Run Script Phase;<br><img src=\"/img/2018:01:20_155205.png\" alt=\"outputScreen\"></p>\n<p>3.添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Sets the target folders and the final framework product.</div><div class=\"line\"></div><div class=\"line\"># 如果工程名称和Framework的Target名称不一样的话，要自定义FMKNAME</div><div class=\"line\"></div><div class=\"line\"># 例如: FMK_NAME = &quot;MyFramework&quot;</div><div class=\"line\"></div><div class=\"line\">FMK_NAME=$&#123;PROJECT_NAME&#125;</div><div class=\"line\"></div><div class=\"line\"># Install dir will be the final output to the framework.</div><div class=\"line\"></div><div class=\"line\"># The following line create it in the root folder of the current project.</div><div class=\"line\"></div><div class=\"line\">INSTALL_DIR=$&#123;SRCROOT&#125;/Products/$&#123;FMK_NAME&#125;.framework</div><div class=\"line\"></div><div class=\"line\"># Working dir will be deleted after the framework creation.</div><div class=\"line\"></div><div class=\"line\">WRK_DIR=build</div><div class=\"line\"></div><div class=\"line\">DEVICE_DIR=$&#123;WRK_DIR&#125;/Release-iphoneos/$&#123;FMK_NAME&#125;.framework</div><div class=\"line\"></div><div class=\"line\">SIMULATOR_DIR=$&#123;WRK_DIR&#125;/Release-iphonesimulator/$&#123;FMK_NAME&#125;.framework</div><div class=\"line\"></div><div class=\"line\"># -configuration $&#123;CONFIGURATION&#125;</div><div class=\"line\"></div><div class=\"line\"># Clean and Building both architectures.</div><div class=\"line\"></div><div class=\"line\">xcodebuild -configuration &quot;Release&quot; -target &quot;$&#123;FMK_NAME&#125;&quot; -sdk iphoneos clean build</div><div class=\"line\"></div><div class=\"line\">xcodebuild -configuration &quot;Release&quot; -target &quot;$&#123;FMK_NAME&#125;&quot; -sdk iphonesimulator clean build</div><div class=\"line\"></div><div class=\"line\"># Cleaning the oldest.</div><div class=\"line\"></div><div class=\"line\">if [ -d &quot;$&#123;INSTALL_DIR&#125;&quot; ]</div><div class=\"line\"></div><div class=\"line\">then</div><div class=\"line\"></div><div class=\"line\">rm -rf &quot;$&#123;INSTALL_DIR&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">mkdir -p &quot;$&#123;INSTALL_DIR&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">cp -R &quot;$&#123;DEVICE_DIR&#125;/&quot; &quot;$&#123;INSTALL_DIR&#125;/&quot;</div><div class=\"line\"></div><div class=\"line\"># Uses the Lipo Tool to merge both binary files (i386 + armv6/armv7) into one Universal final product.</div><div class=\"line\"></div><div class=\"line\">lipo -create &quot;$&#123;DEVICE_DIR&#125;/$&#123;FMK_NAME&#125;&quot; &quot;$&#123;SIMULATOR_DIR&#125;/$&#123;FMK_NAME&#125;&quot; -output &quot;$&#123;INSTALL_DIR&#125;/$&#123;FMK_NAME&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">rm -r &quot;$&#123;WRK_DIR&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">open &quot;$&#123;INSTALL_DIR&#125;&quot;</div></pre></td></tr></table></figure>\n<p>4.运行EMAggregate，然后就会在该工程旁边生成目录Products，里面就是合并的<br><img src=\"/img/2018:01:20_160506.png\" alt=\"outputScreen\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"工程创建\"><a href=\"#工程创建\" class=\"headerlink\" title=\"工程创建\"></a>工程创建</h2><p>1.打开Xcode -&gt; Create a new Xcode project,然后选择如图的Cocoa Touch Framework, 选择语言、填好包名，组织名<br><img src=\"/img/2018:01:19_164701.jpg\" alt=\"outputScreen\"></p>\n<p>2.工程的Targets下的配置General -&gt; Deployment Info下的Deplayment Target 设置使用的最低版本，我们就设置成9.0便于说明</p>\n<p>3.工程的Targets下的配置Build Settings -&gt; Linking下的Mach-O type 设置为Static Library<br><img src=\"/img/2018:01:20_101602.png\" alt=\"outputScreen\"></p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><p>1.新建三个类test1、test2、test3<br>代码基本如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@interface Test1 : NSObject</div><div class=\"line\"></div><div class=\"line\">- (void)print;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p>test2、test3同理</p>\n<p>2.然后设置test1.h和test1.m完全对外公开、Test2.h公开，test2.m隐蔽、test3.h和test3.m不对外公开</p>\n<p>3.工程的Targets下的配置Build Phases -&gt; Headers下的文件根据上面所示，如下设置，<br>注意：新建一个类的时候，默认Project会默认对应该类的头文件，如果需要完全公开，.m也要对外的话，点击下面的“+”,添加.m，然后将其拖到Public之中,要对外的都放入Public，不对外的放入Project；<br><img src=\"/img/2018:01:20_153303.png\" alt=\"outputScreen\"></p>\n<h2 id=\"生成真机和模拟器合并framework\"><a href=\"#生成真机和模拟器合并framework\" class=\"headerlink\" title=\"生成真机和模拟器合并framework\"></a>生成真机和模拟器合并framework</h2><p>问题：framework如果选择真机运行Products会生成真机framework，只能在真机运行，不能再模拟器运行，同理如果选择模拟器运行Products会生成模拟器framework，只能在模拟器运行，不能在真机运行；</p>\n<p>为了解决以上问题，我们可以通过脚本生成生成真机和模拟器合并framework</p>\n<p>1.Xcode -&gt; File -&gt; Target -&gt; Cross-platform 下面的 other 点击 Aggregate 然后输入了脚本名EMAggregate<br><img src=\"/img/2018:01:20_154804.png\" alt=\"outputScreen\"></p>\n<p>2.工程的Targets下EMAggregate 的 Build Phases 点击左上角“+”，选择New Run Script Phase;<br><img src=\"/img/2018:01:20_155205.png\" alt=\"outputScreen\"></p>\n<p>3.添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Sets the target folders and the final framework product.</div><div class=\"line\"></div><div class=\"line\"># 如果工程名称和Framework的Target名称不一样的话，要自定义FMKNAME</div><div class=\"line\"></div><div class=\"line\"># 例如: FMK_NAME = &quot;MyFramework&quot;</div><div class=\"line\"></div><div class=\"line\">FMK_NAME=$&#123;PROJECT_NAME&#125;</div><div class=\"line\"></div><div class=\"line\"># Install dir will be the final output to the framework.</div><div class=\"line\"></div><div class=\"line\"># The following line create it in the root folder of the current project.</div><div class=\"line\"></div><div class=\"line\">INSTALL_DIR=$&#123;SRCROOT&#125;/Products/$&#123;FMK_NAME&#125;.framework</div><div class=\"line\"></div><div class=\"line\"># Working dir will be deleted after the framework creation.</div><div class=\"line\"></div><div class=\"line\">WRK_DIR=build</div><div class=\"line\"></div><div class=\"line\">DEVICE_DIR=$&#123;WRK_DIR&#125;/Release-iphoneos/$&#123;FMK_NAME&#125;.framework</div><div class=\"line\"></div><div class=\"line\">SIMULATOR_DIR=$&#123;WRK_DIR&#125;/Release-iphonesimulator/$&#123;FMK_NAME&#125;.framework</div><div class=\"line\"></div><div class=\"line\"># -configuration $&#123;CONFIGURATION&#125;</div><div class=\"line\"></div><div class=\"line\"># Clean and Building both architectures.</div><div class=\"line\"></div><div class=\"line\">xcodebuild -configuration &quot;Release&quot; -target &quot;$&#123;FMK_NAME&#125;&quot; -sdk iphoneos clean build</div><div class=\"line\"></div><div class=\"line\">xcodebuild -configuration &quot;Release&quot; -target &quot;$&#123;FMK_NAME&#125;&quot; -sdk iphonesimulator clean build</div><div class=\"line\"></div><div class=\"line\"># Cleaning the oldest.</div><div class=\"line\"></div><div class=\"line\">if [ -d &quot;$&#123;INSTALL_DIR&#125;&quot; ]</div><div class=\"line\"></div><div class=\"line\">then</div><div class=\"line\"></div><div class=\"line\">rm -rf &quot;$&#123;INSTALL_DIR&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">mkdir -p &quot;$&#123;INSTALL_DIR&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">cp -R &quot;$&#123;DEVICE_DIR&#125;/&quot; &quot;$&#123;INSTALL_DIR&#125;/&quot;</div><div class=\"line\"></div><div class=\"line\"># Uses the Lipo Tool to merge both binary files (i386 + armv6/armv7) into one Universal final product.</div><div class=\"line\"></div><div class=\"line\">lipo -create &quot;$&#123;DEVICE_DIR&#125;/$&#123;FMK_NAME&#125;&quot; &quot;$&#123;SIMULATOR_DIR&#125;/$&#123;FMK_NAME&#125;&quot; -output &quot;$&#123;INSTALL_DIR&#125;/$&#123;FMK_NAME&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">rm -r &quot;$&#123;WRK_DIR&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">open &quot;$&#123;INSTALL_DIR&#125;&quot;</div></pre></td></tr></table></figure>\n<p>4.运行EMAggregate，然后就会在该工程旁边生成目录Products，里面就是合并的<br><img src=\"/img/2018:01:20_160506.png\" alt=\"outputScreen\"></p>\n"},{"title":"hexo备份导出","date":"2017-11-09T07:25:01.000Z","_content":"\n# hexo 备忘录\n\n### 备份存储\n\n在GitHub上的[CarryRee.github.io](https://github.com/CarryRee/CarryRee.github.io).仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。\n\n![img](/img/2017:11:9_152054.jpg)\n\n### 备份导出\n1. 从GitHub上的[CarryRee.github.io](https://github.com/CarryRee/CarryRee.github.io) clone分支hexo\n2. 使用终端cd 进入clone的文件夹\n3. 本地新拷贝的[CarryRee.github.io](https://github.com/CarryRee/CarryRee.github.io).文件夹下通过Git bash依次执行下列指令：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init这条指令）。\n\n### 注意\n1. 问题一：执行“hexo server”出现以下错误\n```\nnpm install hexo --no-optional\n```\n\n2. 安装Hexo时，执行“npm install -g hexo-cli“出现错误\n```\nsudo npm install --unsafe-perm --verbose -g hexo\n```\n","source":"_posts/hexoBackup.md","raw":"---\ntitle: hexo备份导出\ndate: 2017-11-09 15:25:01\ntags:\n---\n\n# hexo 备忘录\n\n### 备份存储\n\n在GitHub上的[CarryRee.github.io](https://github.com/CarryRee/CarryRee.github.io).仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。\n\n![img](/img/2017:11:9_152054.jpg)\n\n### 备份导出\n1. 从GitHub上的[CarryRee.github.io](https://github.com/CarryRee/CarryRee.github.io) clone分支hexo\n2. 使用终端cd 进入clone的文件夹\n3. 本地新拷贝的[CarryRee.github.io](https://github.com/CarryRee/CarryRee.github.io).文件夹下通过Git bash依次执行下列指令：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init这条指令）。\n\n### 注意\n1. 问题一：执行“hexo server”出现以下错误\n```\nnpm install hexo --no-optional\n```\n\n2. 安装Hexo时，执行“npm install -g hexo-cli“出现错误\n```\nsudo npm install --unsafe-perm --verbose -g hexo\n```\n","slug":"hexoBackup","published":1,"updated":"2017-11-09T07:51:32.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgyhmkq100050ecve8ab8lkq","content":"<h1 id=\"hexo-备忘录\"><a href=\"#hexo-备忘录\" class=\"headerlink\" title=\"hexo 备忘录\"></a>hexo 备忘录</h1><h3 id=\"备份存储\"><a href=\"#备份存储\" class=\"headerlink\" title=\"备份存储\"></a>备份存储</h3><p>在GitHub上的<a href=\"https://github.com/CarryRee/CarryRee.github.io\" target=\"_blank\" rel=\"external\">CarryRee.github.io</a>.仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。</p>\n<p><img src=\"/img/2017:11:9_152054.jpg\" alt=\"img\"></p>\n<h3 id=\"备份导出\"><a href=\"#备份导出\" class=\"headerlink\" title=\"备份导出\"></a>备份导出</h3><ol>\n<li>从GitHub上的<a href=\"https://github.com/CarryRee/CarryRee.github.io\" target=\"_blank\" rel=\"external\">CarryRee.github.io</a> clone分支hexo</li>\n<li>使用终端cd 进入clone的文件夹</li>\n<li>本地新拷贝的<a href=\"https://github.com/CarryRee/CarryRee.github.io\" target=\"_blank\" rel=\"external\">CarryRee.github.io</a>.文件夹下通过Git bash依次执行下列指令：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init这条指令）。</li>\n</ol>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ol>\n<li><p>问题一：执行“hexo server”出现以下错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo --no-optional</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装Hexo时，执行“npm install -g hexo-cli“出现错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo npm install --unsafe-perm --verbose -g hexo</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"hexo-备忘录\"><a href=\"#hexo-备忘录\" class=\"headerlink\" title=\"hexo 备忘录\"></a>hexo 备忘录</h1><h3 id=\"备份存储\"><a href=\"#备份存储\" class=\"headerlink\" title=\"备份存储\"></a>备份存储</h3><p>在GitHub上的<a href=\"https://github.com/CarryRee/CarryRee.github.io\" target=\"_blank\" rel=\"external\">CarryRee.github.io</a>.仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。</p>\n<p><img src=\"/img/2017:11:9_152054.jpg\" alt=\"img\"></p>\n<h3 id=\"备份导出\"><a href=\"#备份导出\" class=\"headerlink\" title=\"备份导出\"></a>备份导出</h3><ol>\n<li>从GitHub上的<a href=\"https://github.com/CarryRee/CarryRee.github.io\" target=\"_blank\" rel=\"external\">CarryRee.github.io</a> clone分支hexo</li>\n<li>使用终端cd 进入clone的文件夹</li>\n<li>本地新拷贝的<a href=\"https://github.com/CarryRee/CarryRee.github.io\" target=\"_blank\" rel=\"external\">CarryRee.github.io</a>.文件夹下通过Git bash依次执行下列指令：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init这条指令）。</li>\n</ol>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ol>\n<li><p>问题一：执行“hexo server”出现以下错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo --no-optional</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装Hexo时，执行“npm install -g hexo-cli“出现错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo npm install --unsafe-perm --verbose -g hexo</div></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"浅谈block的循环引用","date":"2017-07-28T09:18:02.000Z","_content":"\n浅谈block的循环引用\n==\n\n\n##### 1.前言：最近在项目上经常遇到控制器pop出来却不执行dealloc的，很多时候都是block循环引用导致，所以特意对block进行一番研究，以防自己犯引用错误；\n\n##### 2.在ARC环境下，比较常见的发生循环引用就是self -> block -> self 从而形成环，导致不被释放，或者其他类持有block -> self，但这个没有释放，或没有主动释放block；\n\n##### 3.案例分析：\n\n\n控制器：\n\n```\n@interface BlockViewController ()\n\n@property (nonatomic, strong) PropertyTest *propertyTest;\n@property (nonatomic, strong) NSString *name;\n@property (nonatomic, copy) void(^myBlock)();\n@property (nonatomic, strong) NSMutableArray *dataArray;\n\n@end\n```\n\n控制器属性：\n\n```\n@interface propertyTest : NSObject\n@property (nonatomic, copy) void(^propertyBlock)();\n@end\n```\n\n单例：\n\n```\ntypedef void(^TestBlock)(void);\n\n@interface Singleton : NSObject\n\n@property (nonatomic, copy) TestBlock testBlock;\n\n+ (instancetype) sharedSingleton;\n- (void) test;\n```\n***\n\n**1）GCD里面的block**\n\n```\ndispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\nself.name = @\"test\";\n});\n```\n结果：执行了dealloc <br>\n分析：GCD是一次性派发的任务，当执行完block,会释放block，GCD本身也释放\n\n**2) 属性的block**\n\n```\nself.propertyTest = [[PropertyTest alloc] init];\n\nself.propertyTest.block = ^{\nself.name = @\"test\";\n};\n\n```\n\n结果：不执行了dealloc <br>\n分析：self->self.propertyTest->block->self.name(self),此情况就是最典型的循环引用了，形成保留环无法释放\n\n**3) 属性的block, 增加__weak声明**\n\n```\nself.propertyTest = [[PropertyTest alloc] init];\n\n__weak typeof (self) wealSelf = self;\nself.propertyTest.block = ^{\ntypeof(wealSelf) strongSelf = wealSelf;\nstrongSelf.name = @\"test\";\n};\n\n```\n\n结果：执行了dealloc <br>\n分析：self->self.propertyTest->block->self.name(self),但是weak打破了循环，后面那个strongSelf和原来的self并没有直接关系，因为strongSelf是通过weakSelf得来的，而weakSelf又没有强引用原来的self\n\n**4) 成员的block**\n\n```\nself.propertyTest = [[PropertyTest alloc] init];\n\nself.propertyTest.block = ^{\n_name = @\"test\";\n};\n\n```\n\n结果：不执行了dealloc <br>\n分析：self->self.propertyTest->block->_name(self),跟2）上述同理\n\n**5) 成员的block,增加__weak声明，但还是用成员**\n\n```\nself.propertyTest = [[PropertyTest alloc] init];\n\n__weak typeof (self) weakSelf = self;\nself.propertyTest.block = ^{\ntypeof(weakSelf) strongSelf = weakSelf;\n_name = @\"test\";\n};\n\n```\n\n结果：不执行了dealloc <br>\n分析：self->self.propertyTest->block->_name(self),虽然被weak打破，还是用了self的成员name\n\n**6) 属性的block,结束后重置为nil**\n\n```\nself.propertyTest.block = ^{\nself.name = @\"test\";\nself.propertyTest.block = nil;\nself.propertyTest = nil;\nNSLog(@\"%@\", self.propertyTest);\n};\n\n```\n\n结果：不执行了dealloc <br>\n分析：self->self.propertyTest->block->self.name(self),self.propertyTest = nil,self.propertyTest.block = nil;虽然强制为空，应该是拷贝到堆上的block还没有释放；\n\n**7) 临时生成类**\n\n```\nPropertyTest *propertyTest = [[PropertyTest alloc] init];\n\npropertyTest.block = ^{\nself.name = @\"test\";\n};\n\n```\n\n结果：执行了dealloc <br>\n分析：propertyTest->block->self.name(self),未形成环,注意：在ARC中，在被拷贝的 block 中无论是直接引用self 还是通过引用self的成员变量间接引用self，该block都会retain self。但是block执行完会释放一次，临时生成的类释放也会在释放一次；\n\n**8) 单例持有**\n\n```\n[Singleton sharedSingleton].testBlock = ^{\nself.name = @\"test\";\n};\n\n```\n\n结果：不执行了dealloc <br>\n分析：Singleton 执行完释放一次block, 但是Singleton是单例, 并没有释放;\n\n**9) 单例持有,__weak声明**\n\n```\n__weak typeof (self) weakSelf = self;\n[Singleton sharedSingleton].testBlock = ^{\ntypeof(weakSelf) strongSelf = weakSelf;\nstrongSelf.name = @\"test\";\n};\n```\n\n结果：执行了dealloc <br>\n分析：__weak声明使该block不retain self,Singleton 执行完释放一次block,self也释放了；\n\n**10) 单例持有，手动释放**\n\n```\n[Singleton sharedSingleton].testBlock = ^{\nself.name = @\"test\";\n};\n[Singleton sharedSingleton].testBlock = nil;\n```\n结果：执行了dealloc <br>\n分析：在ARC中，在被拷贝的 block 中无论是直接引用self 还是通过引用self的成员变量间接引用self，该block都会retain self。但是block执行完会释放一次，然后被手动释放了一次，self也释放了；\n\n\n**11) 数组包含block**\n\n```\nPropertyTest *propertyTest = [[PropertyTest alloc] init];\n\npropertyTest.block = ^{\nself.name = @\"test\";\n};\n\nself.dataArray = [NSMutableArray array];\n[self.dataArray addObject:propertyTest];\n```\n结果：不执行了dealloc <br>\n分析：self.dataArray -> propertyTest -> block -> self.name ,这是间接持有\n\n\n**12) 数组包含block, __weak声明**\n\n```\nPropertyTest *propertyTest = [[PropertyTest alloc] init];\n\n__weak typeof (self) weakSelf = self;\npropertyTest.block = ^{\ntypeof(weakSelf) strongSelf = weakSelf;\nstrongSelf.name = @\"test\";\n};\n\nself.dataArray = [NSMutableArray array];\n[self.dataArray addObject:propertyTest];\n```\n结果：执行了dealloc <br>\n分析：self.dataArray -> propertyTest -> block -> self.name ,这是间接持有, 但被 weak 打破循环\n\n","source":"_posts/memory.md","raw":"---\ntitle: 浅谈block的循环引用\ndate: 2017-07-28 17:18:02\ntags: 内存管理 block\n---\n\n浅谈block的循环引用\n==\n\n\n##### 1.前言：最近在项目上经常遇到控制器pop出来却不执行dealloc的，很多时候都是block循环引用导致，所以特意对block进行一番研究，以防自己犯引用错误；\n\n##### 2.在ARC环境下，比较常见的发生循环引用就是self -> block -> self 从而形成环，导致不被释放，或者其他类持有block -> self，但这个没有释放，或没有主动释放block；\n\n##### 3.案例分析：\n\n\n控制器：\n\n```\n@interface BlockViewController ()\n\n@property (nonatomic, strong) PropertyTest *propertyTest;\n@property (nonatomic, strong) NSString *name;\n@property (nonatomic, copy) void(^myBlock)();\n@property (nonatomic, strong) NSMutableArray *dataArray;\n\n@end\n```\n\n控制器属性：\n\n```\n@interface propertyTest : NSObject\n@property (nonatomic, copy) void(^propertyBlock)();\n@end\n```\n\n单例：\n\n```\ntypedef void(^TestBlock)(void);\n\n@interface Singleton : NSObject\n\n@property (nonatomic, copy) TestBlock testBlock;\n\n+ (instancetype) sharedSingleton;\n- (void) test;\n```\n***\n\n**1）GCD里面的block**\n\n```\ndispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\nself.name = @\"test\";\n});\n```\n结果：执行了dealloc <br>\n分析：GCD是一次性派发的任务，当执行完block,会释放block，GCD本身也释放\n\n**2) 属性的block**\n\n```\nself.propertyTest = [[PropertyTest alloc] init];\n\nself.propertyTest.block = ^{\nself.name = @\"test\";\n};\n\n```\n\n结果：不执行了dealloc <br>\n分析：self->self.propertyTest->block->self.name(self),此情况就是最典型的循环引用了，形成保留环无法释放\n\n**3) 属性的block, 增加__weak声明**\n\n```\nself.propertyTest = [[PropertyTest alloc] init];\n\n__weak typeof (self) wealSelf = self;\nself.propertyTest.block = ^{\ntypeof(wealSelf) strongSelf = wealSelf;\nstrongSelf.name = @\"test\";\n};\n\n```\n\n结果：执行了dealloc <br>\n分析：self->self.propertyTest->block->self.name(self),但是weak打破了循环，后面那个strongSelf和原来的self并没有直接关系，因为strongSelf是通过weakSelf得来的，而weakSelf又没有强引用原来的self\n\n**4) 成员的block**\n\n```\nself.propertyTest = [[PropertyTest alloc] init];\n\nself.propertyTest.block = ^{\n_name = @\"test\";\n};\n\n```\n\n结果：不执行了dealloc <br>\n分析：self->self.propertyTest->block->_name(self),跟2）上述同理\n\n**5) 成员的block,增加__weak声明，但还是用成员**\n\n```\nself.propertyTest = [[PropertyTest alloc] init];\n\n__weak typeof (self) weakSelf = self;\nself.propertyTest.block = ^{\ntypeof(weakSelf) strongSelf = weakSelf;\n_name = @\"test\";\n};\n\n```\n\n结果：不执行了dealloc <br>\n分析：self->self.propertyTest->block->_name(self),虽然被weak打破，还是用了self的成员name\n\n**6) 属性的block,结束后重置为nil**\n\n```\nself.propertyTest.block = ^{\nself.name = @\"test\";\nself.propertyTest.block = nil;\nself.propertyTest = nil;\nNSLog(@\"%@\", self.propertyTest);\n};\n\n```\n\n结果：不执行了dealloc <br>\n分析：self->self.propertyTest->block->self.name(self),self.propertyTest = nil,self.propertyTest.block = nil;虽然强制为空，应该是拷贝到堆上的block还没有释放；\n\n**7) 临时生成类**\n\n```\nPropertyTest *propertyTest = [[PropertyTest alloc] init];\n\npropertyTest.block = ^{\nself.name = @\"test\";\n};\n\n```\n\n结果：执行了dealloc <br>\n分析：propertyTest->block->self.name(self),未形成环,注意：在ARC中，在被拷贝的 block 中无论是直接引用self 还是通过引用self的成员变量间接引用self，该block都会retain self。但是block执行完会释放一次，临时生成的类释放也会在释放一次；\n\n**8) 单例持有**\n\n```\n[Singleton sharedSingleton].testBlock = ^{\nself.name = @\"test\";\n};\n\n```\n\n结果：不执行了dealloc <br>\n分析：Singleton 执行完释放一次block, 但是Singleton是单例, 并没有释放;\n\n**9) 单例持有,__weak声明**\n\n```\n__weak typeof (self) weakSelf = self;\n[Singleton sharedSingleton].testBlock = ^{\ntypeof(weakSelf) strongSelf = weakSelf;\nstrongSelf.name = @\"test\";\n};\n```\n\n结果：执行了dealloc <br>\n分析：__weak声明使该block不retain self,Singleton 执行完释放一次block,self也释放了；\n\n**10) 单例持有，手动释放**\n\n```\n[Singleton sharedSingleton].testBlock = ^{\nself.name = @\"test\";\n};\n[Singleton sharedSingleton].testBlock = nil;\n```\n结果：执行了dealloc <br>\n分析：在ARC中，在被拷贝的 block 中无论是直接引用self 还是通过引用self的成员变量间接引用self，该block都会retain self。但是block执行完会释放一次，然后被手动释放了一次，self也释放了；\n\n\n**11) 数组包含block**\n\n```\nPropertyTest *propertyTest = [[PropertyTest alloc] init];\n\npropertyTest.block = ^{\nself.name = @\"test\";\n};\n\nself.dataArray = [NSMutableArray array];\n[self.dataArray addObject:propertyTest];\n```\n结果：不执行了dealloc <br>\n分析：self.dataArray -> propertyTest -> block -> self.name ,这是间接持有\n\n\n**12) 数组包含block, __weak声明**\n\n```\nPropertyTest *propertyTest = [[PropertyTest alloc] init];\n\n__weak typeof (self) weakSelf = self;\npropertyTest.block = ^{\ntypeof(weakSelf) strongSelf = weakSelf;\nstrongSelf.name = @\"test\";\n};\n\nself.dataArray = [NSMutableArray array];\n[self.dataArray addObject:propertyTest];\n```\n结果：执行了dealloc <br>\n分析：self.dataArray -> propertyTest -> block -> self.name ,这是间接持有, 但被 weak 打破循环\n\n","slug":"memory","published":1,"updated":"2017-07-31T06:10:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgyhmkq300060ecv70p3as5b","content":"<h1 id=\"浅谈block的循环引用\"><a href=\"#浅谈block的循环引用\" class=\"headerlink\" title=\"浅谈block的循环引用\"></a>浅谈block的循环引用</h1><h5 id=\"1-前言：最近在项目上经常遇到控制器pop出来却不执行dealloc的，很多时候都是block循环引用导致，所以特意对block进行一番研究，以防自己犯引用错误；\"><a href=\"#1-前言：最近在项目上经常遇到控制器pop出来却不执行dealloc的，很多时候都是block循环引用导致，所以特意对block进行一番研究，以防自己犯引用错误；\" class=\"headerlink\" title=\"1.前言：最近在项目上经常遇到控制器pop出来却不执行dealloc的，很多时候都是block循环引用导致，所以特意对block进行一番研究，以防自己犯引用错误；\"></a>1.前言：最近在项目上经常遇到控制器pop出来却不执行dealloc的，很多时候都是block循环引用导致，所以特意对block进行一番研究，以防自己犯引用错误；</h5><h5 id=\"2-在ARC环境下，比较常见的发生循环引用就是self-gt-block-gt-self-从而形成环，导致不被释放，或者其他类持有block-gt-self，但这个没有释放，或没有主动释放block；\"><a href=\"#2-在ARC环境下，比较常见的发生循环引用就是self-gt-block-gt-self-从而形成环，导致不被释放，或者其他类持有block-gt-self，但这个没有释放，或没有主动释放block；\" class=\"headerlink\" title=\"2.在ARC环境下，比较常见的发生循环引用就是self -&gt; block -&gt; self 从而形成环，导致不被释放，或者其他类持有block -&gt; self，但这个没有释放，或没有主动释放block；\"></a>2.在ARC环境下，比较常见的发生循环引用就是self -&gt; block -&gt; self 从而形成环，导致不被释放，或者其他类持有block -&gt; self，但这个没有释放，或没有主动释放block；</h5><h5 id=\"3-案例分析：\"><a href=\"#3-案例分析：\" class=\"headerlink\" title=\"3.案例分析：\"></a>3.案例分析：</h5><p>控制器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@interface BlockViewController ()</div><div class=\"line\"></div><div class=\"line\">@property (nonatomic, strong) PropertyTest *propertyTest;</div><div class=\"line\">@property (nonatomic, strong) NSString *name;</div><div class=\"line\">@property (nonatomic, copy) void(^myBlock)();</div><div class=\"line\">@property (nonatomic, strong) NSMutableArray *dataArray;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p>控制器属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@interface propertyTest : NSObject</div><div class=\"line\">@property (nonatomic, copy) void(^propertyBlock)();</div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p>单例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">typedef void(^TestBlock)(void);</div><div class=\"line\"></div><div class=\"line\">@interface Singleton : NSObject</div><div class=\"line\"></div><div class=\"line\">@property (nonatomic, copy) TestBlock testBlock;</div><div class=\"line\"></div><div class=\"line\">+ (instancetype) sharedSingleton;</div><div class=\"line\">- (void) test;</div></pre></td></tr></table></figure>\n<hr>\n<p><strong>1）GCD里面的block</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">self.name = @&quot;test&quot;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>结果：执行了dealloc <br><br>分析：GCD是一次性派发的任务，当执行完block,会释放block，GCD本身也释放</p>\n<p><strong>2) 属性的block</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.propertyTest = [[PropertyTest alloc] init];</div><div class=\"line\"></div><div class=\"line\">self.propertyTest.block = ^&#123;</div><div class=\"line\">self.name = @&quot;test&quot;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>结果：不执行了dealloc <br><br>分析：self-&gt;self.propertyTest-&gt;block-&gt;self.name(self),此情况就是最典型的循环引用了，形成保留环无法释放</p>\n<p><strong>3) 属性的block, 增加__weak声明</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.propertyTest = [[PropertyTest alloc] init];</div><div class=\"line\"></div><div class=\"line\">__weak typeof (self) wealSelf = self;</div><div class=\"line\">self.propertyTest.block = ^&#123;</div><div class=\"line\">typeof(wealSelf) strongSelf = wealSelf;</div><div class=\"line\">strongSelf.name = @&quot;test&quot;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>结果：执行了dealloc <br><br>分析：self-&gt;self.propertyTest-&gt;block-&gt;self.name(self),但是weak打破了循环，后面那个strongSelf和原来的self并没有直接关系，因为strongSelf是通过weakSelf得来的，而weakSelf又没有强引用原来的self</p>\n<p><strong>4) 成员的block</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.propertyTest = [[PropertyTest alloc] init];</div><div class=\"line\"></div><div class=\"line\">self.propertyTest.block = ^&#123;</div><div class=\"line\">_name = @&quot;test&quot;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>结果：不执行了dealloc <br><br>分析：self-&gt;self.propertyTest-&gt;block-&gt;_name(self),跟2）上述同理</p>\n<p><strong>5) 成员的block,增加__weak声明，但还是用成员</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.propertyTest = [[PropertyTest alloc] init];</div><div class=\"line\"></div><div class=\"line\">__weak typeof (self) weakSelf = self;</div><div class=\"line\">self.propertyTest.block = ^&#123;</div><div class=\"line\">typeof(weakSelf) strongSelf = weakSelf;</div><div class=\"line\">_name = @&quot;test&quot;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>结果：不执行了dealloc <br><br>分析：self-&gt;self.propertyTest-&gt;block-&gt;_name(self),虽然被weak打破，还是用了self的成员name</p>\n<p><strong>6) 属性的block,结束后重置为nil</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.propertyTest.block = ^&#123;</div><div class=\"line\">self.name = @&quot;test&quot;;</div><div class=\"line\">self.propertyTest.block = nil;</div><div class=\"line\">self.propertyTest = nil;</div><div class=\"line\">NSLog(@&quot;%@&quot;, self.propertyTest);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>结果：不执行了dealloc <br><br>分析：self-&gt;self.propertyTest-&gt;block-&gt;self.name(self),self.propertyTest = nil,self.propertyTest.block = nil;虽然强制为空，应该是拷贝到堆上的block还没有释放；</p>\n<p><strong>7) 临时生成类</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">PropertyTest *propertyTest = [[PropertyTest alloc] init];</div><div class=\"line\"></div><div class=\"line\">propertyTest.block = ^&#123;</div><div class=\"line\">self.name = @&quot;test&quot;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>结果：执行了dealloc <br><br>分析：propertyTest-&gt;block-&gt;self.name(self),未形成环,注意：在ARC中，在被拷贝的 block 中无论是直接引用self 还是通过引用self的成员变量间接引用self，该block都会retain self。但是block执行完会释放一次，临时生成的类释放也会在释放一次；</p>\n<p><strong>8) 单例持有</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Singleton sharedSingleton].testBlock = ^&#123;</div><div class=\"line\">self.name = @&quot;test&quot;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>结果：不执行了dealloc <br><br>分析：Singleton 执行完释放一次block, 但是Singleton是单例, 并没有释放;</p>\n<p><strong>9) 单例持有,__weak声明</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">__weak typeof (self) weakSelf = self;</div><div class=\"line\">[Singleton sharedSingleton].testBlock = ^&#123;</div><div class=\"line\">typeof(weakSelf) strongSelf = weakSelf;</div><div class=\"line\">strongSelf.name = @&quot;test&quot;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>结果：执行了dealloc <br><br>分析：__weak声明使该block不retain self,Singleton 执行完释放一次block,self也释放了；</p>\n<p><strong>10) 单例持有，手动释放</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Singleton sharedSingleton].testBlock = ^&#123;</div><div class=\"line\">self.name = @&quot;test&quot;;</div><div class=\"line\">&#125;;</div><div class=\"line\">[Singleton sharedSingleton].testBlock = nil;</div></pre></td></tr></table></figure>\n<p>结果：执行了dealloc <br><br>分析：在ARC中，在被拷贝的 block 中无论是直接引用self 还是通过引用self的成员变量间接引用self，该block都会retain self。但是block执行完会释放一次，然后被手动释放了一次，self也释放了；</p>\n<p><strong>11) 数组包含block</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">PropertyTest *propertyTest = [[PropertyTest alloc] init];</div><div class=\"line\"></div><div class=\"line\">propertyTest.block = ^&#123;</div><div class=\"line\">self.name = @&quot;test&quot;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">self.dataArray = [NSMutableArray array];</div><div class=\"line\">[self.dataArray addObject:propertyTest];</div></pre></td></tr></table></figure>\n<p>结果：不执行了dealloc <br><br>分析：self.dataArray -&gt; propertyTest -&gt; block -&gt; self.name ,这是间接持有</p>\n<p><strong>12) 数组包含block, __weak声明</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">PropertyTest *propertyTest = [[PropertyTest alloc] init];</div><div class=\"line\"></div><div class=\"line\">__weak typeof (self) weakSelf = self;</div><div class=\"line\">propertyTest.block = ^&#123;</div><div class=\"line\">typeof(weakSelf) strongSelf = weakSelf;</div><div class=\"line\">strongSelf.name = @&quot;test&quot;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">self.dataArray = [NSMutableArray array];</div><div class=\"line\">[self.dataArray addObject:propertyTest];</div></pre></td></tr></table></figure>\n<p>结果：执行了dealloc <br><br>分析：self.dataArray -&gt; propertyTest -&gt; block -&gt; self.name ,这是间接持有, 但被 weak 打破循环</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"浅谈block的循环引用\"><a href=\"#浅谈block的循环引用\" class=\"headerlink\" title=\"浅谈block的循环引用\"></a>浅谈block的循环引用</h1><h5 id=\"1-前言：最近在项目上经常遇到控制器pop出来却不执行dealloc的，很多时候都是block循环引用导致，所以特意对block进行一番研究，以防自己犯引用错误；\"><a href=\"#1-前言：最近在项目上经常遇到控制器pop出来却不执行dealloc的，很多时候都是block循环引用导致，所以特意对block进行一番研究，以防自己犯引用错误；\" class=\"headerlink\" title=\"1.前言：最近在项目上经常遇到控制器pop出来却不执行dealloc的，很多时候都是block循环引用导致，所以特意对block进行一番研究，以防自己犯引用错误；\"></a>1.前言：最近在项目上经常遇到控制器pop出来却不执行dealloc的，很多时候都是block循环引用导致，所以特意对block进行一番研究，以防自己犯引用错误；</h5><h5 id=\"2-在ARC环境下，比较常见的发生循环引用就是self-gt-block-gt-self-从而形成环，导致不被释放，或者其他类持有block-gt-self，但这个没有释放，或没有主动释放block；\"><a href=\"#2-在ARC环境下，比较常见的发生循环引用就是self-gt-block-gt-self-从而形成环，导致不被释放，或者其他类持有block-gt-self，但这个没有释放，或没有主动释放block；\" class=\"headerlink\" title=\"2.在ARC环境下，比较常见的发生循环引用就是self -&gt; block -&gt; self 从而形成环，导致不被释放，或者其他类持有block -&gt; self，但这个没有释放，或没有主动释放block；\"></a>2.在ARC环境下，比较常见的发生循环引用就是self -&gt; block -&gt; self 从而形成环，导致不被释放，或者其他类持有block -&gt; self，但这个没有释放，或没有主动释放block；</h5><h5 id=\"3-案例分析：\"><a href=\"#3-案例分析：\" class=\"headerlink\" title=\"3.案例分析：\"></a>3.案例分析：</h5><p>控制器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@interface BlockViewController ()</div><div class=\"line\"></div><div class=\"line\">@property (nonatomic, strong) PropertyTest *propertyTest;</div><div class=\"line\">@property (nonatomic, strong) NSString *name;</div><div class=\"line\">@property (nonatomic, copy) void(^myBlock)();</div><div class=\"line\">@property (nonatomic, strong) NSMutableArray *dataArray;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p>控制器属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@interface propertyTest : NSObject</div><div class=\"line\">@property (nonatomic, copy) void(^propertyBlock)();</div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p>单例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">typedef void(^TestBlock)(void);</div><div class=\"line\"></div><div class=\"line\">@interface Singleton : NSObject</div><div class=\"line\"></div><div class=\"line\">@property (nonatomic, copy) TestBlock testBlock;</div><div class=\"line\"></div><div class=\"line\">+ (instancetype) sharedSingleton;</div><div class=\"line\">- (void) test;</div></pre></td></tr></table></figure>\n<hr>\n<p><strong>1）GCD里面的block</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">self.name = @&quot;test&quot;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>结果：执行了dealloc <br><br>分析：GCD是一次性派发的任务，当执行完block,会释放block，GCD本身也释放</p>\n<p><strong>2) 属性的block</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.propertyTest = [[PropertyTest alloc] init];</div><div class=\"line\"></div><div class=\"line\">self.propertyTest.block = ^&#123;</div><div class=\"line\">self.name = @&quot;test&quot;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>结果：不执行了dealloc <br><br>分析：self-&gt;self.propertyTest-&gt;block-&gt;self.name(self),此情况就是最典型的循环引用了，形成保留环无法释放</p>\n<p><strong>3) 属性的block, 增加__weak声明</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.propertyTest = [[PropertyTest alloc] init];</div><div class=\"line\"></div><div class=\"line\">__weak typeof (self) wealSelf = self;</div><div class=\"line\">self.propertyTest.block = ^&#123;</div><div class=\"line\">typeof(wealSelf) strongSelf = wealSelf;</div><div class=\"line\">strongSelf.name = @&quot;test&quot;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>结果：执行了dealloc <br><br>分析：self-&gt;self.propertyTest-&gt;block-&gt;self.name(self),但是weak打破了循环，后面那个strongSelf和原来的self并没有直接关系，因为strongSelf是通过weakSelf得来的，而weakSelf又没有强引用原来的self</p>\n<p><strong>4) 成员的block</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.propertyTest = [[PropertyTest alloc] init];</div><div class=\"line\"></div><div class=\"line\">self.propertyTest.block = ^&#123;</div><div class=\"line\">_name = @&quot;test&quot;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>结果：不执行了dealloc <br><br>分析：self-&gt;self.propertyTest-&gt;block-&gt;_name(self),跟2）上述同理</p>\n<p><strong>5) 成员的block,增加__weak声明，但还是用成员</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.propertyTest = [[PropertyTest alloc] init];</div><div class=\"line\"></div><div class=\"line\">__weak typeof (self) weakSelf = self;</div><div class=\"line\">self.propertyTest.block = ^&#123;</div><div class=\"line\">typeof(weakSelf) strongSelf = weakSelf;</div><div class=\"line\">_name = @&quot;test&quot;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>结果：不执行了dealloc <br><br>分析：self-&gt;self.propertyTest-&gt;block-&gt;_name(self),虽然被weak打破，还是用了self的成员name</p>\n<p><strong>6) 属性的block,结束后重置为nil</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.propertyTest.block = ^&#123;</div><div class=\"line\">self.name = @&quot;test&quot;;</div><div class=\"line\">self.propertyTest.block = nil;</div><div class=\"line\">self.propertyTest = nil;</div><div class=\"line\">NSLog(@&quot;%@&quot;, self.propertyTest);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>结果：不执行了dealloc <br><br>分析：self-&gt;self.propertyTest-&gt;block-&gt;self.name(self),self.propertyTest = nil,self.propertyTest.block = nil;虽然强制为空，应该是拷贝到堆上的block还没有释放；</p>\n<p><strong>7) 临时生成类</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">PropertyTest *propertyTest = [[PropertyTest alloc] init];</div><div class=\"line\"></div><div class=\"line\">propertyTest.block = ^&#123;</div><div class=\"line\">self.name = @&quot;test&quot;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>结果：执行了dealloc <br><br>分析：propertyTest-&gt;block-&gt;self.name(self),未形成环,注意：在ARC中，在被拷贝的 block 中无论是直接引用self 还是通过引用self的成员变量间接引用self，该block都会retain self。但是block执行完会释放一次，临时生成的类释放也会在释放一次；</p>\n<p><strong>8) 单例持有</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Singleton sharedSingleton].testBlock = ^&#123;</div><div class=\"line\">self.name = @&quot;test&quot;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>结果：不执行了dealloc <br><br>分析：Singleton 执行完释放一次block, 但是Singleton是单例, 并没有释放;</p>\n<p><strong>9) 单例持有,__weak声明</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">__weak typeof (self) weakSelf = self;</div><div class=\"line\">[Singleton sharedSingleton].testBlock = ^&#123;</div><div class=\"line\">typeof(weakSelf) strongSelf = weakSelf;</div><div class=\"line\">strongSelf.name = @&quot;test&quot;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>结果：执行了dealloc <br><br>分析：__weak声明使该block不retain self,Singleton 执行完释放一次block,self也释放了；</p>\n<p><strong>10) 单例持有，手动释放</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Singleton sharedSingleton].testBlock = ^&#123;</div><div class=\"line\">self.name = @&quot;test&quot;;</div><div class=\"line\">&#125;;</div><div class=\"line\">[Singleton sharedSingleton].testBlock = nil;</div></pre></td></tr></table></figure>\n<p>结果：执行了dealloc <br><br>分析：在ARC中，在被拷贝的 block 中无论是直接引用self 还是通过引用self的成员变量间接引用self，该block都会retain self。但是block执行完会释放一次，然后被手动释放了一次，self也释放了；</p>\n<p><strong>11) 数组包含block</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">PropertyTest *propertyTest = [[PropertyTest alloc] init];</div><div class=\"line\"></div><div class=\"line\">propertyTest.block = ^&#123;</div><div class=\"line\">self.name = @&quot;test&quot;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">self.dataArray = [NSMutableArray array];</div><div class=\"line\">[self.dataArray addObject:propertyTest];</div></pre></td></tr></table></figure>\n<p>结果：不执行了dealloc <br><br>分析：self.dataArray -&gt; propertyTest -&gt; block -&gt; self.name ,这是间接持有</p>\n<p><strong>12) 数组包含block, __weak声明</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">PropertyTest *propertyTest = [[PropertyTest alloc] init];</div><div class=\"line\"></div><div class=\"line\">__weak typeof (self) weakSelf = self;</div><div class=\"line\">propertyTest.block = ^&#123;</div><div class=\"line\">typeof(weakSelf) strongSelf = weakSelf;</div><div class=\"line\">strongSelf.name = @&quot;test&quot;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">self.dataArray = [NSMutableArray array];</div><div class=\"line\">[self.dataArray addObject:propertyTest];</div></pre></td></tr></table></figure>\n<p>结果：执行了dealloc <br><br>分析：self.dataArray -&gt; propertyTest -&gt; block -&gt; self.name ,这是间接持有, 但被 weak 打破循环</p>\n"},{"title":"打包framework上传到github","date":"2018-02-08T11:10:57.000Z","_content":"\n## 一.github创建项目\n1.登陆github\n\n2.创建仓库\n![outputScreen](/img/2018:02:08_145301.jpg)\n\n\n## 二.制作SSH-KEY\n\n1.生成SSH-Key\n打开终端查看是否已经存在SSH密钥：\n```\ncd ~/.ssh\n```\n如果没有密钥则不会有此文件夹，有则备份删除, 也可以直接删除；\n\n2.生成新的秘钥, 命令如下\n\n```\nssh-keygen -t rsa -C \"1441699953@qq.com\"\n```\n你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，因为这个Key仅仅用于简单的服务，所以也无需设置密码。\n\n3.自定义生成key的名字(直接回车)\n![outputScreen](/img/2018:02:08_134804.jpg)\n\n4.设置密码(直接回车)\n![outputScreen](/img/2018:02:08_135005.jpg)\n\n5.成功生成SSH-Key\n![outputScreen](/img/2018:02:08_135106.jpg)\n\n6.在~/.ssh/目录下会生成id_rsa和id_rsa.pub私钥和公钥。我们将id_rsa_emeet.pub中的内容粘帖到服务器的SSH-key的配置中。\n可以用查看命令\n\n```\ncat id_rsa.pub\n```\n\n用复制命令\n\n```\npbcopy < ~.ssh/id_rsa.pub\n```\n\n![outputScreen](/img/2018:02:08_193010.jpg)\n\n7.在GitHub的设置中粘贴公钥,Setting -> SSH and GPG keys -> New SSH key\n![outputScreen](/img/2018:02:08_164208.jpg)\n\n8.测试\n```\nssh -T git@github.com\n```\n成功的话会有You've successfully authenticated的语句提示\n\n## 三.上传framework\n\n1.拷贝仓库到git链接，因为配置了SSH，选择复制SSH链接\n<img src=\"/img/2018:02:08_131102.jpg\" width=\"300\">\n\n2.git clone 下载项目\n\n```\ngit clone git@github.com:EMTest2018/EMTest.git\n```\n\n3.在克隆下来的文件项目放入framework,[上一篇制作好的framework](http://carryree.com/2018/01/20/framework/#more).\n<img src=\"/img/2018:02:08_131703.jpg\" width=\"500\">\n\n4.打开终端，cd到克隆下来的文件夹下面\n\n5.添加framework\n\n```\ngit add EMTest.framework\n```\n6.添加日志\n\n```\ngit commit -m \"framework\"\n```\n7.上传\n\n```\ngit push -u origin master \n```\n<img src=\"/img/2018:02:08_190309.jpg\" width=\"400\">\n\n8.给稳定的代码打上版本tag，一般以版本号作为tag名字\n\n```\ngit tag 1.0.0\n```\n\n9.将tag推送到git服务器\n\n```\ngit push --tags\n```","source":"_posts/uploadGithub.md","raw":"---\ntitle: 打包framework上传到github\ndate: 2018-02-08 19:10:57\ntags:\n---\n\n## 一.github创建项目\n1.登陆github\n\n2.创建仓库\n![outputScreen](/img/2018:02:08_145301.jpg)\n\n\n## 二.制作SSH-KEY\n\n1.生成SSH-Key\n打开终端查看是否已经存在SSH密钥：\n```\ncd ~/.ssh\n```\n如果没有密钥则不会有此文件夹，有则备份删除, 也可以直接删除；\n\n2.生成新的秘钥, 命令如下\n\n```\nssh-keygen -t rsa -C \"1441699953@qq.com\"\n```\n你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，因为这个Key仅仅用于简单的服务，所以也无需设置密码。\n\n3.自定义生成key的名字(直接回车)\n![outputScreen](/img/2018:02:08_134804.jpg)\n\n4.设置密码(直接回车)\n![outputScreen](/img/2018:02:08_135005.jpg)\n\n5.成功生成SSH-Key\n![outputScreen](/img/2018:02:08_135106.jpg)\n\n6.在~/.ssh/目录下会生成id_rsa和id_rsa.pub私钥和公钥。我们将id_rsa_emeet.pub中的内容粘帖到服务器的SSH-key的配置中。\n可以用查看命令\n\n```\ncat id_rsa.pub\n```\n\n用复制命令\n\n```\npbcopy < ~.ssh/id_rsa.pub\n```\n\n![outputScreen](/img/2018:02:08_193010.jpg)\n\n7.在GitHub的设置中粘贴公钥,Setting -> SSH and GPG keys -> New SSH key\n![outputScreen](/img/2018:02:08_164208.jpg)\n\n8.测试\n```\nssh -T git@github.com\n```\n成功的话会有You've successfully authenticated的语句提示\n\n## 三.上传framework\n\n1.拷贝仓库到git链接，因为配置了SSH，选择复制SSH链接\n<img src=\"/img/2018:02:08_131102.jpg\" width=\"300\">\n\n2.git clone 下载项目\n\n```\ngit clone git@github.com:EMTest2018/EMTest.git\n```\n\n3.在克隆下来的文件项目放入framework,[上一篇制作好的framework](http://carryree.com/2018/01/20/framework/#more).\n<img src=\"/img/2018:02:08_131703.jpg\" width=\"500\">\n\n4.打开终端，cd到克隆下来的文件夹下面\n\n5.添加framework\n\n```\ngit add EMTest.framework\n```\n6.添加日志\n\n```\ngit commit -m \"framework\"\n```\n7.上传\n\n```\ngit push -u origin master \n```\n<img src=\"/img/2018:02:08_190309.jpg\" width=\"400\">\n\n8.给稳定的代码打上版本tag，一般以版本号作为tag名字\n\n```\ngit tag 1.0.0\n```\n\n9.将tag推送到git服务器\n\n```\ngit push --tags\n```","slug":"uploadGithub","published":1,"updated":"2018-02-09T02:28:37.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgyhmkq400090ecvmeumib9c","content":"<h2 id=\"一-github创建项目\"><a href=\"#一-github创建项目\" class=\"headerlink\" title=\"一.github创建项目\"></a>一.github创建项目</h2><p>1.登陆github</p>\n<p>2.创建仓库<br><img src=\"/img/2018:02:08_145301.jpg\" alt=\"outputScreen\"></p>\n<h2 id=\"二-制作SSH-KEY\"><a href=\"#二-制作SSH-KEY\" class=\"headerlink\" title=\"二.制作SSH-KEY\"></a>二.制作SSH-KEY</h2><p>1.生成SSH-Key<br>打开终端查看是否已经存在SSH密钥：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/.ssh</div></pre></td></tr></table></figure></p>\n<p>如果没有密钥则不会有此文件夹，有则备份删除, 也可以直接删除；</p>\n<p>2.生成新的秘钥, 命令如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen -t rsa -C &quot;1441699953@qq.com&quot;</div></pre></td></tr></table></figure>\n<p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，因为这个Key仅仅用于简单的服务，所以也无需设置密码。</p>\n<p>3.自定义生成key的名字(直接回车)<br><img src=\"/img/2018:02:08_134804.jpg\" alt=\"outputScreen\"></p>\n<p>4.设置密码(直接回车)<br><img src=\"/img/2018:02:08_135005.jpg\" alt=\"outputScreen\"></p>\n<p>5.成功生成SSH-Key<br><img src=\"/img/2018:02:08_135106.jpg\" alt=\"outputScreen\"></p>\n<p>6.在~/.ssh/目录下会生成id_rsa和id_rsa.pub私钥和公钥。我们将id_rsa_emeet.pub中的内容粘帖到服务器的SSH-key的配置中。<br>可以用查看命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat id_rsa.pub</div></pre></td></tr></table></figure>\n<p>用复制命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pbcopy &lt; ~.ssh/id_rsa.pub</div></pre></td></tr></table></figure>\n<p><img src=\"/img/2018:02:08_193010.jpg\" alt=\"outputScreen\"></p>\n<p>7.在GitHub的设置中粘贴公钥,Setting -&gt; SSH and GPG keys -&gt; New SSH key<br><img src=\"/img/2018:02:08_164208.jpg\" alt=\"outputScreen\"></p>\n<p>8.测试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh -T git@github.com</div></pre></td></tr></table></figure></p>\n<p>成功的话会有You’ve successfully authenticated的语句提示</p>\n<h2 id=\"三-上传framework\"><a href=\"#三-上传framework\" class=\"headerlink\" title=\"三.上传framework\"></a>三.上传framework</h2><p>1.拷贝仓库到git链接，因为配置了SSH，选择复制SSH链接<br><img src=\"/img/2018:02:08_131102.jpg\" width=\"300\"></p>\n<p>2.git clone 下载项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone git@github.com:EMTest2018/EMTest.git</div></pre></td></tr></table></figure>\n<p>3.在克隆下来的文件项目放入framework,<a href=\"http://carryree.com/2018/01/20/framework/#more\" target=\"_blank\" rel=\"external\">上一篇制作好的framework</a>.<br><img src=\"/img/2018:02:08_131703.jpg\" width=\"500\"></p>\n<p>4.打开终端，cd到克隆下来的文件夹下面</p>\n<p>5.添加framework</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add EMTest.framework</div></pre></td></tr></table></figure>\n<p>6.添加日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -m &quot;framework&quot;</div></pre></td></tr></table></figure>\n<p>7.上传</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push -u origin master</div></pre></td></tr></table></figure>\n<p><img src=\"/img/2018:02:08_190309.jpg\" width=\"400\"></p>\n<p>8.给稳定的代码打上版本tag，一般以版本号作为tag名字</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git tag 1.0.0</div></pre></td></tr></table></figure>\n<p>9.将tag推送到git服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push --tags</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-github创建项目\"><a href=\"#一-github创建项目\" class=\"headerlink\" title=\"一.github创建项目\"></a>一.github创建项目</h2><p>1.登陆github</p>\n<p>2.创建仓库<br><img src=\"/img/2018:02:08_145301.jpg\" alt=\"outputScreen\"></p>\n<h2 id=\"二-制作SSH-KEY\"><a href=\"#二-制作SSH-KEY\" class=\"headerlink\" title=\"二.制作SSH-KEY\"></a>二.制作SSH-KEY</h2><p>1.生成SSH-Key<br>打开终端查看是否已经存在SSH密钥：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/.ssh</div></pre></td></tr></table></figure></p>\n<p>如果没有密钥则不会有此文件夹，有则备份删除, 也可以直接删除；</p>\n<p>2.生成新的秘钥, 命令如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen -t rsa -C &quot;1441699953@qq.com&quot;</div></pre></td></tr></table></figure>\n<p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，因为这个Key仅仅用于简单的服务，所以也无需设置密码。</p>\n<p>3.自定义生成key的名字(直接回车)<br><img src=\"/img/2018:02:08_134804.jpg\" alt=\"outputScreen\"></p>\n<p>4.设置密码(直接回车)<br><img src=\"/img/2018:02:08_135005.jpg\" alt=\"outputScreen\"></p>\n<p>5.成功生成SSH-Key<br><img src=\"/img/2018:02:08_135106.jpg\" alt=\"outputScreen\"></p>\n<p>6.在~/.ssh/目录下会生成id_rsa和id_rsa.pub私钥和公钥。我们将id_rsa_emeet.pub中的内容粘帖到服务器的SSH-key的配置中。<br>可以用查看命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat id_rsa.pub</div></pre></td></tr></table></figure>\n<p>用复制命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pbcopy &lt; ~.ssh/id_rsa.pub</div></pre></td></tr></table></figure>\n<p><img src=\"/img/2018:02:08_193010.jpg\" alt=\"outputScreen\"></p>\n<p>7.在GitHub的设置中粘贴公钥,Setting -&gt; SSH and GPG keys -&gt; New SSH key<br><img src=\"/img/2018:02:08_164208.jpg\" alt=\"outputScreen\"></p>\n<p>8.测试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh -T git@github.com</div></pre></td></tr></table></figure></p>\n<p>成功的话会有You’ve successfully authenticated的语句提示</p>\n<h2 id=\"三-上传framework\"><a href=\"#三-上传framework\" class=\"headerlink\" title=\"三.上传framework\"></a>三.上传framework</h2><p>1.拷贝仓库到git链接，因为配置了SSH，选择复制SSH链接<br><img src=\"/img/2018:02:08_131102.jpg\" width=\"300\"></p>\n<p>2.git clone 下载项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone git@github.com:EMTest2018/EMTest.git</div></pre></td></tr></table></figure>\n<p>3.在克隆下来的文件项目放入framework,<a href=\"http://carryree.com/2018/01/20/framework/#more\" target=\"_blank\" rel=\"external\">上一篇制作好的framework</a>.<br><img src=\"/img/2018:02:08_131703.jpg\" width=\"500\"></p>\n<p>4.打开终端，cd到克隆下来的文件夹下面</p>\n<p>5.添加framework</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add EMTest.framework</div></pre></td></tr></table></figure>\n<p>6.添加日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -m &quot;framework&quot;</div></pre></td></tr></table></figure>\n<p>7.上传</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push -u origin master</div></pre></td></tr></table></figure>\n<p><img src=\"/img/2018:02:08_190309.jpg\" width=\"400\"></p>\n<p>8.给稳定的代码打上版本tag，一般以版本号作为tag名字</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git tag 1.0.0</div></pre></td></tr></table></figure>\n<p>9.将tag推送到git服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push --tags</div></pre></td></tr></table></figure>"},{"title":"工程的动态库同时支持真机和模拟器","date":"2017-11-22T02:31:25.000Z","_content":"\n\n## 问题\n最近在工程使用到了第三方提供的SDK，有的第三方提供的是framework的是动态库，只提供真机和模拟器，如果的想同时支持真机和模拟，一想到就是合并，输出一个通用framework\n\n```\nlipo -create 【模拟器打包path】 【真机打包path】 -output 【导出兼容版本path】\n```\n\n可惜一般得出结果是\n![outputScreen](/img/2017:11:22_094601.jpeg)\n**分析**：这个命令是静态库使用，动态库并不适用\n\n## 测试Framework\n使用XCode新建一个动态库\n![newFrameWork](/img/2017:11:22_094701.jpeg)\n\n在 Build Settings 的 Linking 下设置 Mach-O type 为 Dynamic Library\n![settingFrame](/img/2017:11:22_094801.jpeg)\n\n代码也简单加一方法，给外部调用\n\n**Test.h**\n\n```\n@interface Test : NSObject\n- (void)helloWorld;\n@end\n```\n\n**Test.m**\n\n```\n- (void)helloWorld {\nNSLog(@\"%@\", @\"Hello, world!\");\n}\n```\n\n通过xcode编译出真机和模拟器的framework\n这里我把真机的framework文件夹名字命名为iphoneos、模拟器的framework文件夹名字命名为iphonesimulator，注意：这一步很重要；\n\n\n## 测试工程\n随便新建一个工程，把两个framework拖入工程，然后删除**LinkFrame works and Librarues**, 然后**Embedded Binaries**再添加两个动态库\n<img src=\"/img/2017:11:22_094901.jpeg\" width=\"300\">\n\n设置如下图设置\n![settingProject2](/img/2017:11:22_095202.jpeg)\n\n最后导入库\n```\n#import <TestFrame/Test.h>\n```\n调用方法\n\n```\nTest *test = [[Test alloc] init];\n[test helloWorld];\n```\n\n编译看看，是不是编译不过，没错，两个库冲突了\n\n## 冲突处理\n\n1.删掉其中一个（>-<），废话中的废话\n\n2.共存处理（下面重点介绍）\n\n\n## 共存处理\n\n1.在两个framework的文件夹下建立一个新文件夹，命名为$PLATFORM_NAME,随便将一个framework复制进去\n![settingProject7](/img/2017:11:22_101345.jpeg)\n\n2.将两个framework从工程中删除（逻辑删除），随便讲其中一个拖入工程，注意是拖framework，不是文件夹\n\n3.点击拖入的framework，如图所示，配置路径\n![settingProject3](/img/2017:11:22_095701.jpeg)\n\n4.然后配置**Build Settings**下的Framework Search Paths设置为$PLATFORM_NAME文件夹的路径（路径为红色不要紧）\n![settingProject4](/img/2017:11:22_095801.jpeg)\n\n5.更改选择为$PLATFORM_NAME文件夹下的framework,然后找到改文件夹去改删去该文件夹（你没有看错），是物理删除该文件夹\n![settingProject8](/img/2017:11:22_101645.jpeg)\n\n6.**Embedded Binaries**再添加回$PLATFORM_NAME的framework（路径为浅色不要紧）\n<img src=\"/img/2017:11:22_095845.jpeg\" width=\"300\">\n\n7.基本到这里就可以\n![settingProject6](/img/2017:11:22_095901.jpeg)\n","source":"_posts/platform.md","raw":"---\ntitle: 工程的动态库同时支持真机和模拟器\ndate: 2017-11-22 10:31:25\ntags: Framework\ncategories: \n---\n\n\n## 问题\n最近在工程使用到了第三方提供的SDK，有的第三方提供的是framework的是动态库，只提供真机和模拟器，如果的想同时支持真机和模拟，一想到就是合并，输出一个通用framework\n\n```\nlipo -create 【模拟器打包path】 【真机打包path】 -output 【导出兼容版本path】\n```\n\n可惜一般得出结果是\n![outputScreen](/img/2017:11:22_094601.jpeg)\n**分析**：这个命令是静态库使用，动态库并不适用\n\n## 测试Framework\n使用XCode新建一个动态库\n![newFrameWork](/img/2017:11:22_094701.jpeg)\n\n在 Build Settings 的 Linking 下设置 Mach-O type 为 Dynamic Library\n![settingFrame](/img/2017:11:22_094801.jpeg)\n\n代码也简单加一方法，给外部调用\n\n**Test.h**\n\n```\n@interface Test : NSObject\n- (void)helloWorld;\n@end\n```\n\n**Test.m**\n\n```\n- (void)helloWorld {\nNSLog(@\"%@\", @\"Hello, world!\");\n}\n```\n\n通过xcode编译出真机和模拟器的framework\n这里我把真机的framework文件夹名字命名为iphoneos、模拟器的framework文件夹名字命名为iphonesimulator，注意：这一步很重要；\n\n\n## 测试工程\n随便新建一个工程，把两个framework拖入工程，然后删除**LinkFrame works and Librarues**, 然后**Embedded Binaries**再添加两个动态库\n<img src=\"/img/2017:11:22_094901.jpeg\" width=\"300\">\n\n设置如下图设置\n![settingProject2](/img/2017:11:22_095202.jpeg)\n\n最后导入库\n```\n#import <TestFrame/Test.h>\n```\n调用方法\n\n```\nTest *test = [[Test alloc] init];\n[test helloWorld];\n```\n\n编译看看，是不是编译不过，没错，两个库冲突了\n\n## 冲突处理\n\n1.删掉其中一个（>-<），废话中的废话\n\n2.共存处理（下面重点介绍）\n\n\n## 共存处理\n\n1.在两个framework的文件夹下建立一个新文件夹，命名为$PLATFORM_NAME,随便将一个framework复制进去\n![settingProject7](/img/2017:11:22_101345.jpeg)\n\n2.将两个framework从工程中删除（逻辑删除），随便讲其中一个拖入工程，注意是拖framework，不是文件夹\n\n3.点击拖入的framework，如图所示，配置路径\n![settingProject3](/img/2017:11:22_095701.jpeg)\n\n4.然后配置**Build Settings**下的Framework Search Paths设置为$PLATFORM_NAME文件夹的路径（路径为红色不要紧）\n![settingProject4](/img/2017:11:22_095801.jpeg)\n\n5.更改选择为$PLATFORM_NAME文件夹下的framework,然后找到改文件夹去改删去该文件夹（你没有看错），是物理删除该文件夹\n![settingProject8](/img/2017:11:22_101645.jpeg)\n\n6.**Embedded Binaries**再添加回$PLATFORM_NAME的framework（路径为浅色不要紧）\n<img src=\"/img/2017:11:22_095845.jpeg\" width=\"300\">\n\n7.基本到这里就可以\n![settingProject6](/img/2017:11:22_095901.jpeg)\n","slug":"platform","published":1,"updated":"2018-01-20T08:47:00.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgyhmkq6000a0ecvdpgvb2bs","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>最近在工程使用到了第三方提供的SDK，有的第三方提供的是framework的是动态库，只提供真机和模拟器，如果的想同时支持真机和模拟，一想到就是合并，输出一个通用framework</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">lipo -create 【模拟器打包path】 【真机打包path】 -output 【导出兼容版本path】</div></pre></td></tr></table></figure>\n<p>可惜一般得出结果是<br><img src=\"/img/2017:11:22_094601.jpeg\" alt=\"outputScreen\"><br><strong>分析</strong>：这个命令是静态库使用，动态库并不适用</p>\n<h2 id=\"测试Framework\"><a href=\"#测试Framework\" class=\"headerlink\" title=\"测试Framework\"></a>测试Framework</h2><p>使用XCode新建一个动态库<br><img src=\"/img/2017:11:22_094701.jpeg\" alt=\"newFrameWork\"></p>\n<p>在 Build Settings 的 Linking 下设置 Mach-O type 为 Dynamic Library<br><img src=\"/img/2017:11:22_094801.jpeg\" alt=\"settingFrame\"></p>\n<p>代码也简单加一方法，给外部调用</p>\n<p><strong>Test.h</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@interface Test : NSObject</div><div class=\"line\">- (void)helloWorld;</div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p><strong>Test.m</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)helloWorld &#123;</div><div class=\"line\">NSLog(@&quot;%@&quot;, @&quot;Hello, world!&quot;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过xcode编译出真机和模拟器的framework<br>这里我把真机的framework文件夹名字命名为iphoneos、模拟器的framework文件夹名字命名为iphonesimulator，注意：这一步很重要；</p>\n<h2 id=\"测试工程\"><a href=\"#测试工程\" class=\"headerlink\" title=\"测试工程\"></a>测试工程</h2><p>随便新建一个工程，把两个framework拖入工程，然后删除<strong>LinkFrame works and Librarues</strong>, 然后<strong>Embedded Binaries</strong>再添加两个动态库<br><img src=\"/img/2017:11:22_094901.jpeg\" width=\"300\"></p>\n<p>设置如下图设置<br><img src=\"/img/2017:11:22_095202.jpeg\" alt=\"settingProject2\"></p>\n<p>最后导入库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;TestFrame/Test.h&gt;</div></pre></td></tr></table></figure></p>\n<p>调用方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Test *test = [[Test alloc] init];</div><div class=\"line\">[test helloWorld];</div></pre></td></tr></table></figure>\n<p>编译看看，是不是编译不过，没错，两个库冲突了</p>\n<h2 id=\"冲突处理\"><a href=\"#冲突处理\" class=\"headerlink\" title=\"冲突处理\"></a>冲突处理</h2><p>1.删掉其中一个（&gt;-&lt;），废话中的废话</p>\n<p>2.共存处理（下面重点介绍）</p>\n<h2 id=\"共存处理\"><a href=\"#共存处理\" class=\"headerlink\" title=\"共存处理\"></a>共存处理</h2><p>1.在两个framework的文件夹下建立一个新文件夹，命名为$PLATFORM_NAME,随便将一个framework复制进去<br><img src=\"/img/2017:11:22_101345.jpeg\" alt=\"settingProject7\"></p>\n<p>2.将两个framework从工程中删除（逻辑删除），随便讲其中一个拖入工程，注意是拖framework，不是文件夹</p>\n<p>3.点击拖入的framework，如图所示，配置路径<br><img src=\"/img/2017:11:22_095701.jpeg\" alt=\"settingProject3\"></p>\n<p>4.然后配置<strong>Build Settings</strong>下的Framework Search Paths设置为$PLATFORM_NAME文件夹的路径（路径为红色不要紧）<br><img src=\"/img/2017:11:22_095801.jpeg\" alt=\"settingProject4\"></p>\n<p>5.更改选择为$PLATFORM_NAME文件夹下的framework,然后找到改文件夹去改删去该文件夹（你没有看错），是物理删除该文件夹<br><img src=\"/img/2017:11:22_101645.jpeg\" alt=\"settingProject8\"></p>\n<p>6.<strong>Embedded Binaries</strong>再添加回$PLATFORM_NAME的framework（路径为浅色不要紧）<br><img src=\"/img/2017:11:22_095845.jpeg\" width=\"300\"></p>\n<p>7.基本到这里就可以<br><img src=\"/img/2017:11:22_095901.jpeg\" alt=\"settingProject6\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>最近在工程使用到了第三方提供的SDK，有的第三方提供的是framework的是动态库，只提供真机和模拟器，如果的想同时支持真机和模拟，一想到就是合并，输出一个通用framework</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">lipo -create 【模拟器打包path】 【真机打包path】 -output 【导出兼容版本path】</div></pre></td></tr></table></figure>\n<p>可惜一般得出结果是<br><img src=\"/img/2017:11:22_094601.jpeg\" alt=\"outputScreen\"><br><strong>分析</strong>：这个命令是静态库使用，动态库并不适用</p>\n<h2 id=\"测试Framework\"><a href=\"#测试Framework\" class=\"headerlink\" title=\"测试Framework\"></a>测试Framework</h2><p>使用XCode新建一个动态库<br><img src=\"/img/2017:11:22_094701.jpeg\" alt=\"newFrameWork\"></p>\n<p>在 Build Settings 的 Linking 下设置 Mach-O type 为 Dynamic Library<br><img src=\"/img/2017:11:22_094801.jpeg\" alt=\"settingFrame\"></p>\n<p>代码也简单加一方法，给外部调用</p>\n<p><strong>Test.h</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@interface Test : NSObject</div><div class=\"line\">- (void)helloWorld;</div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p><strong>Test.m</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)helloWorld &#123;</div><div class=\"line\">NSLog(@&quot;%@&quot;, @&quot;Hello, world!&quot;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过xcode编译出真机和模拟器的framework<br>这里我把真机的framework文件夹名字命名为iphoneos、模拟器的framework文件夹名字命名为iphonesimulator，注意：这一步很重要；</p>\n<h2 id=\"测试工程\"><a href=\"#测试工程\" class=\"headerlink\" title=\"测试工程\"></a>测试工程</h2><p>随便新建一个工程，把两个framework拖入工程，然后删除<strong>LinkFrame works and Librarues</strong>, 然后<strong>Embedded Binaries</strong>再添加两个动态库<br><img src=\"/img/2017:11:22_094901.jpeg\" width=\"300\"></p>\n<p>设置如下图设置<br><img src=\"/img/2017:11:22_095202.jpeg\" alt=\"settingProject2\"></p>\n<p>最后导入库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;TestFrame/Test.h&gt;</div></pre></td></tr></table></figure></p>\n<p>调用方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Test *test = [[Test alloc] init];</div><div class=\"line\">[test helloWorld];</div></pre></td></tr></table></figure>\n<p>编译看看，是不是编译不过，没错，两个库冲突了</p>\n<h2 id=\"冲突处理\"><a href=\"#冲突处理\" class=\"headerlink\" title=\"冲突处理\"></a>冲突处理</h2><p>1.删掉其中一个（&gt;-&lt;），废话中的废话</p>\n<p>2.共存处理（下面重点介绍）</p>\n<h2 id=\"共存处理\"><a href=\"#共存处理\" class=\"headerlink\" title=\"共存处理\"></a>共存处理</h2><p>1.在两个framework的文件夹下建立一个新文件夹，命名为$PLATFORM_NAME,随便将一个framework复制进去<br><img src=\"/img/2017:11:22_101345.jpeg\" alt=\"settingProject7\"></p>\n<p>2.将两个framework从工程中删除（逻辑删除），随便讲其中一个拖入工程，注意是拖framework，不是文件夹</p>\n<p>3.点击拖入的framework，如图所示，配置路径<br><img src=\"/img/2017:11:22_095701.jpeg\" alt=\"settingProject3\"></p>\n<p>4.然后配置<strong>Build Settings</strong>下的Framework Search Paths设置为$PLATFORM_NAME文件夹的路径（路径为红色不要紧）<br><img src=\"/img/2017:11:22_095801.jpeg\" alt=\"settingProject4\"></p>\n<p>5.更改选择为$PLATFORM_NAME文件夹下的framework,然后找到改文件夹去改删去该文件夹（你没有看错），是物理删除该文件夹<br><img src=\"/img/2017:11:22_101645.jpeg\" alt=\"settingProject8\"></p>\n<p>6.<strong>Embedded Binaries</strong>再添加回$PLATFORM_NAME的framework（路径为浅色不要紧）<br><img src=\"/img/2017:11:22_095845.jpeg\" width=\"300\"></p>\n<p>7.基本到这里就可以<br><img src=\"/img/2017:11:22_095901.jpeg\" alt=\"settingProject6\"></p>\n"},{"title":"将Framework提交Cocoapods","date":"2018-02-09T06:13:43.000Z","_content":"\n\n## 一.上传framework到Github\n参考[打包framework上传到github](http://carryree.com/2018/02/08/uploadGithub/)\n\n\n## 二.安装cocoapods的打包插件\n\n1.安装\n\n```\nsudo gem install cocoapods-packager\n```\n\n2.注册\n\n```\npod trunk register xxxx@xx.com xxxx --verbose\n```\n\nxxxx@xx.com 为注册邮箱     \nxxxx 为用户名\n\n注册后收到一封邮件，复制邮件打开链接完成注册\n<img src=\"/img/2018:02:09_110201.jpg\" width=\"400\">\n\n3.查看注册信息\n\n```\npod trunk me\n```\n\n## 三.上传cocoa pods\n\n1.cd 到你的git本地目录\n\n2.在工程根目录初始化一个Podspec文件 最好与你项目同名\n\n```\npod spec create EMTest\n```\n<img src=\"/img/2018:02:09_110302.jpg\" width=\"500\">\n\n3.配置自己的podspec文件(仅供参考)\n\n```\n#\n#  Be sure to run `pod spec lint EMTest.podspec' to ensure this is a\n#  valid spec and to remove all comments including this before submitting the spec.\n#\n#  To learn more about Podspec attributes see http://docs.cocoapods.org/specification.html\n#  To see working Podspecs in the CocoaPods repo see https://github.com/CocoaPods/Specs/\n#\n\nPod::Spec.new do |s|\n\n  # ―――  Spec Metadata  ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #\n  #\n  #  These will help people to find your library, and whilst it\n  #  can feel like a chore to fill in it's definitely to your advantage. The\n  #  summary should be tweet-length, and the description more in depth.\n  #\n\n  s.name         = \"EMTest\"\n  s.version      = \"1.0.0\"\n  s.summary      = \"This is just test.\"\n\n  # This description is used to generate tags and improve search results.\n  #   * Think: What does it do? Why did you write it? What is the focus?\n  #   * Try to keep it short, snappy and to the point.\n  #   * Write the description between the DESC delimiters below.\n  #   * Finally, don't worry about the indent, CocoaPods strips it!\n  s.description  = 'test for github, CarryRee'\n\n  s.homepage     = \"http://www.emeet.ai\"\n  # s.screenshots  = \"www.example.com/screenshots_1.gif\", \"www.example.com/screenshots_2.gif\"\n\n\n  # ―――  Spec License  ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #\n  #\n  #  Licensing your code is important. See http://choosealicense.com for more info.\n  #  CocoaPods will detect a license file if there is a named LICENSE*\n  #  Popular ones are 'MIT', 'BSD' and 'Apache License, Version 2.0'.\n  #\n\n  s.license      = { :type => \"MIT\", :file => \"LICENSE\" }\n\n\n  # ――― Author Metadata  ――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #\n  #\n  #  Specify the authors of the library, with email addresses. Email addresses\n  #  of the authors are extracted from the SCM log. E.g. $ git log. CocoaPods also\n  #  accepts just a name if you'd rather not provide an email address.\n  #\n  #  Specify a social_media_url where others can refer to, for example a twitter\n  #  profile URL.\n  #\n\n  s.author             = { \"CarryRee\" => \"63755364@qq.com\" }\n  # Or just: s.author    = \"CarryRee\"\n  # s.authors            = { \"CarryRee\" => \"63755364@qq.com\" }\n  # s.social_media_url   = \"http://twitter.com/CarryRee\"\n\n  # ――― Platform Specifics ――――――――――――――――――――――――――――――――――――――――――――――――――――――― #\n  #\n  #  If this Pod runs only on iOS or OS X, then specify the platform and\n  #  the deployment target. You can optionally include the target after the platform.\n  #\n\n  s.platform     = :ios\n  s.platform     = :ios, \"9.0\"\n\n  #  When using multiple platforms\n  # s.ios.deployment_target = \"5.0\"\n  # s.osx.deployment_target = \"10.7\"\n  # s.watchos.deployment_target = \"2.0\"\n  # s.tvos.deployment_target = \"9.0\"\n\n\n  # ――― Source Location ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #\n  #\n  #  Specify the location from where the source should be retrieved.\n  #  Supports git, hg, bzr, svn and HTTP.\n  #\n\n  s.source       = { :git => \"https://github.com/CarryRee/EMTest.git\", :tag => s.version.to_s  }\n\n\n  # ――― Source Code ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #\n  #\n  #  CocoaPods is smart about how it includes source code. For source files\n  #  giving a folder will include any swift, h, m, mm, c & cpp files.\n  #  For header files it will include any header in the folder.\n  #  Not including the public_header_files will make all headers public.\n  #\n\n  #s.source_files  = \"Classes\", \"Classes/**/*.{h,m}\"\n  #s.exclude_files = \"Classes/Exclude\"\n  s.vendored_frameworks = 'EMTest.framework'\n\n  # s.public_header_files = \"Classes/**/*.h\"\n\n\n  # ――― Resources ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #\n  #\n  #  A list of resources included with the Pod. These are copied into the\n  #  target bundle with a build phase script. Anything else will be cleaned.\n  #  You can preserve files from being cleaned, please don't preserve\n  #  non-essential files like tests, examples and documentation.\n  #\n\n  # s.resource  = \"icon.png\"\n  # s.resources = \"Resources/*.png\"\n\n  # s.preserve_paths = \"FilesToSave\", \"MoreFilesToSave\"\n\n\n  # ――― Project Linking ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #\n  #\n  #  Link your library with frameworks, or libraries. Libraries do not include\n  #  the lib prefix of their name.\n  #\n\n  # s.framework  = \"SomeFramework\"\n  # s.frameworks = \"SomeFramework\", \"AnotherFramework\"\n\n  # s.library   = \"iconv\"\n  # s.libraries = \"iconv\", \"xml2\"\n\n\n  # ――― Project Settings ――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #\n  #\n  #  If your library depends on compiler flags you can set them in the xcconfig hash\n  #  where they will only apply to your library. If you depend on other Podspecs\n  #  you can include multiple dependencies to ensure it works.\n\n  s.requires_arc = true\n\n  # s.xcconfig = { \"HEADER_SEARCH_PATHS\" => \"$(SDKROOT)/usr/include/libxml2\" }\n  # s.dependency \"JSONKit\", \"~> 1.4\"\n\nend\n\n```\n\n3.验证\n\n```\npod lib lint\n```\n\n<img src=\"/img/2018:02:09_112103.jpg\" width=\"300\">\n\n4.提交cocoa pods (这个有点耐心, 需要会时间)\n\n```\npod trunk push EMTest.podspec\n```\n<img src=\"/img/2018:02:09_113004.jpg\" width=\"500\">\n\n注意记得把.podspec也上传到Github中\n\n```\ngit add EMTest.podspec\ngit commit -m \"pod\"\ngit push -u origin master\n```\n\n\n5.成功后搜索\n\n```\npod search EMTest \n```\n\n6.如果搜索不出来 更新下cocoapods\n\n```\npod setup  \n```\n7.如果还是没有，一直显示\n\n>[!] Unable to find a pod with name, author, summary, or description matching `EMTest`\n\n执行\n\n```\nrm ~/Library/Caches/CocoaPods/search_index.json\n```\n\n在执行pod search就会重新搜索\n<img src=\"/img/2018:02:09_141205.jpg\" width=\"500\">\n\n","source":"_posts/uploadPod.md","raw":"---\ntitle: 将Framework提交Cocoapods\ndate: 2018-02-09 14:13:43\ntags:\n---\n\n\n## 一.上传framework到Github\n参考[打包framework上传到github](http://carryree.com/2018/02/08/uploadGithub/)\n\n\n## 二.安装cocoapods的打包插件\n\n1.安装\n\n```\nsudo gem install cocoapods-packager\n```\n\n2.注册\n\n```\npod trunk register xxxx@xx.com xxxx --verbose\n```\n\nxxxx@xx.com 为注册邮箱     \nxxxx 为用户名\n\n注册后收到一封邮件，复制邮件打开链接完成注册\n<img src=\"/img/2018:02:09_110201.jpg\" width=\"400\">\n\n3.查看注册信息\n\n```\npod trunk me\n```\n\n## 三.上传cocoa pods\n\n1.cd 到你的git本地目录\n\n2.在工程根目录初始化一个Podspec文件 最好与你项目同名\n\n```\npod spec create EMTest\n```\n<img src=\"/img/2018:02:09_110302.jpg\" width=\"500\">\n\n3.配置自己的podspec文件(仅供参考)\n\n```\n#\n#  Be sure to run `pod spec lint EMTest.podspec' to ensure this is a\n#  valid spec and to remove all comments including this before submitting the spec.\n#\n#  To learn more about Podspec attributes see http://docs.cocoapods.org/specification.html\n#  To see working Podspecs in the CocoaPods repo see https://github.com/CocoaPods/Specs/\n#\n\nPod::Spec.new do |s|\n\n  # ―――  Spec Metadata  ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #\n  #\n  #  These will help people to find your library, and whilst it\n  #  can feel like a chore to fill in it's definitely to your advantage. The\n  #  summary should be tweet-length, and the description more in depth.\n  #\n\n  s.name         = \"EMTest\"\n  s.version      = \"1.0.0\"\n  s.summary      = \"This is just test.\"\n\n  # This description is used to generate tags and improve search results.\n  #   * Think: What does it do? Why did you write it? What is the focus?\n  #   * Try to keep it short, snappy and to the point.\n  #   * Write the description between the DESC delimiters below.\n  #   * Finally, don't worry about the indent, CocoaPods strips it!\n  s.description  = 'test for github, CarryRee'\n\n  s.homepage     = \"http://www.emeet.ai\"\n  # s.screenshots  = \"www.example.com/screenshots_1.gif\", \"www.example.com/screenshots_2.gif\"\n\n\n  # ―――  Spec License  ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #\n  #\n  #  Licensing your code is important. See http://choosealicense.com for more info.\n  #  CocoaPods will detect a license file if there is a named LICENSE*\n  #  Popular ones are 'MIT', 'BSD' and 'Apache License, Version 2.0'.\n  #\n\n  s.license      = { :type => \"MIT\", :file => \"LICENSE\" }\n\n\n  # ――― Author Metadata  ――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #\n  #\n  #  Specify the authors of the library, with email addresses. Email addresses\n  #  of the authors are extracted from the SCM log. E.g. $ git log. CocoaPods also\n  #  accepts just a name if you'd rather not provide an email address.\n  #\n  #  Specify a social_media_url where others can refer to, for example a twitter\n  #  profile URL.\n  #\n\n  s.author             = { \"CarryRee\" => \"63755364@qq.com\" }\n  # Or just: s.author    = \"CarryRee\"\n  # s.authors            = { \"CarryRee\" => \"63755364@qq.com\" }\n  # s.social_media_url   = \"http://twitter.com/CarryRee\"\n\n  # ――― Platform Specifics ――――――――――――――――――――――――――――――――――――――――――――――――――――――― #\n  #\n  #  If this Pod runs only on iOS or OS X, then specify the platform and\n  #  the deployment target. You can optionally include the target after the platform.\n  #\n\n  s.platform     = :ios\n  s.platform     = :ios, \"9.0\"\n\n  #  When using multiple platforms\n  # s.ios.deployment_target = \"5.0\"\n  # s.osx.deployment_target = \"10.7\"\n  # s.watchos.deployment_target = \"2.0\"\n  # s.tvos.deployment_target = \"9.0\"\n\n\n  # ――― Source Location ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #\n  #\n  #  Specify the location from where the source should be retrieved.\n  #  Supports git, hg, bzr, svn and HTTP.\n  #\n\n  s.source       = { :git => \"https://github.com/CarryRee/EMTest.git\", :tag => s.version.to_s  }\n\n\n  # ――― Source Code ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #\n  #\n  #  CocoaPods is smart about how it includes source code. For source files\n  #  giving a folder will include any swift, h, m, mm, c & cpp files.\n  #  For header files it will include any header in the folder.\n  #  Not including the public_header_files will make all headers public.\n  #\n\n  #s.source_files  = \"Classes\", \"Classes/**/*.{h,m}\"\n  #s.exclude_files = \"Classes/Exclude\"\n  s.vendored_frameworks = 'EMTest.framework'\n\n  # s.public_header_files = \"Classes/**/*.h\"\n\n\n  # ――― Resources ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #\n  #\n  #  A list of resources included with the Pod. These are copied into the\n  #  target bundle with a build phase script. Anything else will be cleaned.\n  #  You can preserve files from being cleaned, please don't preserve\n  #  non-essential files like tests, examples and documentation.\n  #\n\n  # s.resource  = \"icon.png\"\n  # s.resources = \"Resources/*.png\"\n\n  # s.preserve_paths = \"FilesToSave\", \"MoreFilesToSave\"\n\n\n  # ――― Project Linking ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #\n  #\n  #  Link your library with frameworks, or libraries. Libraries do not include\n  #  the lib prefix of their name.\n  #\n\n  # s.framework  = \"SomeFramework\"\n  # s.frameworks = \"SomeFramework\", \"AnotherFramework\"\n\n  # s.library   = \"iconv\"\n  # s.libraries = \"iconv\", \"xml2\"\n\n\n  # ――― Project Settings ――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #\n  #\n  #  If your library depends on compiler flags you can set them in the xcconfig hash\n  #  where they will only apply to your library. If you depend on other Podspecs\n  #  you can include multiple dependencies to ensure it works.\n\n  s.requires_arc = true\n\n  # s.xcconfig = { \"HEADER_SEARCH_PATHS\" => \"$(SDKROOT)/usr/include/libxml2\" }\n  # s.dependency \"JSONKit\", \"~> 1.4\"\n\nend\n\n```\n\n3.验证\n\n```\npod lib lint\n```\n\n<img src=\"/img/2018:02:09_112103.jpg\" width=\"300\">\n\n4.提交cocoa pods (这个有点耐心, 需要会时间)\n\n```\npod trunk push EMTest.podspec\n```\n<img src=\"/img/2018:02:09_113004.jpg\" width=\"500\">\n\n注意记得把.podspec也上传到Github中\n\n```\ngit add EMTest.podspec\ngit commit -m \"pod\"\ngit push -u origin master\n```\n\n\n5.成功后搜索\n\n```\npod search EMTest \n```\n\n6.如果搜索不出来 更新下cocoapods\n\n```\npod setup  \n```\n7.如果还是没有，一直显示\n\n>[!] Unable to find a pod with name, author, summary, or description matching `EMTest`\n\n执行\n\n```\nrm ~/Library/Caches/CocoaPods/search_index.json\n```\n\n在执行pod search就会重新搜索\n<img src=\"/img/2018:02:09_141205.jpg\" width=\"500\">\n\n","slug":"uploadPod","published":1,"updated":"2018-02-09T06:22:35.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgyhmkq7000c0ecvpp270fnc","content":"<h2 id=\"一-上传framework到Github\"><a href=\"#一-上传framework到Github\" class=\"headerlink\" title=\"一.上传framework到Github\"></a>一.上传framework到Github</h2><p>参考<a href=\"http://carryree.com/2018/02/08/uploadGithub/\" target=\"_blank\" rel=\"external\">打包framework上传到github</a></p>\n<h2 id=\"二-安装cocoapods的打包插件\"><a href=\"#二-安装cocoapods的打包插件\" class=\"headerlink\" title=\"二.安装cocoapods的打包插件\"></a>二.安装cocoapods的打包插件</h2><p>1.安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gem install cocoapods-packager</div></pre></td></tr></table></figure>\n<p>2.注册</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod trunk register xxxx@xx.com xxxx --verbose</div></pre></td></tr></table></figure>\n<p>xxxx@xx.com 为注册邮箱<br>xxxx 为用户名</p>\n<p>注册后收到一封邮件，复制邮件打开链接完成注册<br><img src=\"/img/2018:02:09_110201.jpg\" width=\"400\"></p>\n<p>3.查看注册信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod trunk me</div></pre></td></tr></table></figure>\n<h2 id=\"三-上传cocoa-pods\"><a href=\"#三-上传cocoa-pods\" class=\"headerlink\" title=\"三.上传cocoa pods\"></a>三.上传cocoa pods</h2><p>1.cd 到你的git本地目录</p>\n<p>2.在工程根目录初始化一个Podspec文件 最好与你项目同名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod spec create EMTest</div></pre></td></tr></table></figure>\n<p><img src=\"/img/2018:02:09_110302.jpg\" width=\"500\"></p>\n<p>3.配置自己的podspec文件(仅供参考)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div></pre></td><td class=\"code\"><pre><div class=\"line\">#</div><div class=\"line\">#  Be sure to run `pod spec lint EMTest.podspec&apos; to ensure this is a</div><div class=\"line\">#  valid spec and to remove all comments including this before submitting the spec.</div><div class=\"line\">#</div><div class=\"line\">#  To learn more about Podspec attributes see http://docs.cocoapods.org/specification.html</div><div class=\"line\">#  To see working Podspecs in the CocoaPods repo see https://github.com/CocoaPods/Specs/</div><div class=\"line\">#</div><div class=\"line\"></div><div class=\"line\">Pod::Spec.new do |s|</div><div class=\"line\"></div><div class=\"line\">  # ―――  Spec Metadata  ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class=\"line\">  #</div><div class=\"line\">  #  These will help people to find your library, and whilst it</div><div class=\"line\">  #  can feel like a chore to fill in it&apos;s definitely to your advantage. The</div><div class=\"line\">  #  summary should be tweet-length, and the description more in depth.</div><div class=\"line\">  #</div><div class=\"line\"></div><div class=\"line\">  s.name         = &quot;EMTest&quot;</div><div class=\"line\">  s.version      = &quot;1.0.0&quot;</div><div class=\"line\">  s.summary      = &quot;This is just test.&quot;</div><div class=\"line\"></div><div class=\"line\">  # This description is used to generate tags and improve search results.</div><div class=\"line\">  #   * Think: What does it do? Why did you write it? What is the focus?</div><div class=\"line\">  #   * Try to keep it short, snappy and to the point.</div><div class=\"line\">  #   * Write the description between the DESC delimiters below.</div><div class=\"line\">  #   * Finally, don&apos;t worry about the indent, CocoaPods strips it!</div><div class=\"line\">  s.description  = &apos;test for github, CarryRee&apos;</div><div class=\"line\"></div><div class=\"line\">  s.homepage     = &quot;http://www.emeet.ai&quot;</div><div class=\"line\">  # s.screenshots  = &quot;www.example.com/screenshots_1.gif&quot;, &quot;www.example.com/screenshots_2.gif&quot;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  # ―――  Spec License  ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class=\"line\">  #</div><div class=\"line\">  #  Licensing your code is important. See http://choosealicense.com for more info.</div><div class=\"line\">  #  CocoaPods will detect a license file if there is a named LICENSE*</div><div class=\"line\">  #  Popular ones are &apos;MIT&apos;, &apos;BSD&apos; and &apos;Apache License, Version 2.0&apos;.</div><div class=\"line\">  #</div><div class=\"line\"></div><div class=\"line\">  s.license      = &#123; :type =&gt; &quot;MIT&quot;, :file =&gt; &quot;LICENSE&quot; &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  # ――― Author Metadata  ――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class=\"line\">  #</div><div class=\"line\">  #  Specify the authors of the library, with email addresses. Email addresses</div><div class=\"line\">  #  of the authors are extracted from the SCM log. E.g. $ git log. CocoaPods also</div><div class=\"line\">  #  accepts just a name if you&apos;d rather not provide an email address.</div><div class=\"line\">  #</div><div class=\"line\">  #  Specify a social_media_url where others can refer to, for example a twitter</div><div class=\"line\">  #  profile URL.</div><div class=\"line\">  #</div><div class=\"line\"></div><div class=\"line\">  s.author             = &#123; &quot;CarryRee&quot; =&gt; &quot;63755364@qq.com&quot; &#125;</div><div class=\"line\">  # Or just: s.author    = &quot;CarryRee&quot;</div><div class=\"line\">  # s.authors            = &#123; &quot;CarryRee&quot; =&gt; &quot;63755364@qq.com&quot; &#125;</div><div class=\"line\">  # s.social_media_url   = &quot;http://twitter.com/CarryRee&quot;</div><div class=\"line\"></div><div class=\"line\">  # ――― Platform Specifics ――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class=\"line\">  #</div><div class=\"line\">  #  If this Pod runs only on iOS or OS X, then specify the platform and</div><div class=\"line\">  #  the deployment target. You can optionally include the target after the platform.</div><div class=\"line\">  #</div><div class=\"line\"></div><div class=\"line\">  s.platform     = :ios</div><div class=\"line\">  s.platform     = :ios, &quot;9.0&quot;</div><div class=\"line\"></div><div class=\"line\">  #  When using multiple platforms</div><div class=\"line\">  # s.ios.deployment_target = &quot;5.0&quot;</div><div class=\"line\">  # s.osx.deployment_target = &quot;10.7&quot;</div><div class=\"line\">  # s.watchos.deployment_target = &quot;2.0&quot;</div><div class=\"line\">  # s.tvos.deployment_target = &quot;9.0&quot;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  # ――― Source Location ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class=\"line\">  #</div><div class=\"line\">  #  Specify the location from where the source should be retrieved.</div><div class=\"line\">  #  Supports git, hg, bzr, svn and HTTP.</div><div class=\"line\">  #</div><div class=\"line\"></div><div class=\"line\">  s.source       = &#123; :git =&gt; &quot;https://github.com/CarryRee/EMTest.git&quot;, :tag =&gt; s.version.to_s  &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  # ――― Source Code ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class=\"line\">  #</div><div class=\"line\">  #  CocoaPods is smart about how it includes source code. For source files</div><div class=\"line\">  #  giving a folder will include any swift, h, m, mm, c &amp; cpp files.</div><div class=\"line\">  #  For header files it will include any header in the folder.</div><div class=\"line\">  #  Not including the public_header_files will make all headers public.</div><div class=\"line\">  #</div><div class=\"line\"></div><div class=\"line\">  #s.source_files  = &quot;Classes&quot;, &quot;Classes/**/*.&#123;h,m&#125;&quot;</div><div class=\"line\">  #s.exclude_files = &quot;Classes/Exclude&quot;</div><div class=\"line\">  s.vendored_frameworks = &apos;EMTest.framework&apos;</div><div class=\"line\"></div><div class=\"line\">  # s.public_header_files = &quot;Classes/**/*.h&quot;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  # ――― Resources ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class=\"line\">  #</div><div class=\"line\">  #  A list of resources included with the Pod. These are copied into the</div><div class=\"line\">  #  target bundle with a build phase script. Anything else will be cleaned.</div><div class=\"line\">  #  You can preserve files from being cleaned, please don&apos;t preserve</div><div class=\"line\">  #  non-essential files like tests, examples and documentation.</div><div class=\"line\">  #</div><div class=\"line\"></div><div class=\"line\">  # s.resource  = &quot;icon.png&quot;</div><div class=\"line\">  # s.resources = &quot;Resources/*.png&quot;</div><div class=\"line\"></div><div class=\"line\">  # s.preserve_paths = &quot;FilesToSave&quot;, &quot;MoreFilesToSave&quot;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  # ――― Project Linking ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class=\"line\">  #</div><div class=\"line\">  #  Link your library with frameworks, or libraries. Libraries do not include</div><div class=\"line\">  #  the lib prefix of their name.</div><div class=\"line\">  #</div><div class=\"line\"></div><div class=\"line\">  # s.framework  = &quot;SomeFramework&quot;</div><div class=\"line\">  # s.frameworks = &quot;SomeFramework&quot;, &quot;AnotherFramework&quot;</div><div class=\"line\"></div><div class=\"line\">  # s.library   = &quot;iconv&quot;</div><div class=\"line\">  # s.libraries = &quot;iconv&quot;, &quot;xml2&quot;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  # ――― Project Settings ――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class=\"line\">  #</div><div class=\"line\">  #  If your library depends on compiler flags you can set them in the xcconfig hash</div><div class=\"line\">  #  where they will only apply to your library. If you depend on other Podspecs</div><div class=\"line\">  #  you can include multiple dependencies to ensure it works.</div><div class=\"line\"></div><div class=\"line\">  s.requires_arc = true</div><div class=\"line\"></div><div class=\"line\">  # s.xcconfig = &#123; &quot;HEADER_SEARCH_PATHS&quot; =&gt; &quot;$(SDKROOT)/usr/include/libxml2&quot; &#125;</div><div class=\"line\">  # s.dependency &quot;JSONKit&quot;, &quot;~&gt; 1.4&quot;</div><div class=\"line\"></div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>3.验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod lib lint</div></pre></td></tr></table></figure>\n<p><img src=\"/img/2018:02:09_112103.jpg\" width=\"300\"></p>\n<p>4.提交cocoa pods (这个有点耐心, 需要会时间)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod trunk push EMTest.podspec</div></pre></td></tr></table></figure>\n<p><img src=\"/img/2018:02:09_113004.jpg\" width=\"500\"></p>\n<p>注意记得把.podspec也上传到Github中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add EMTest.podspec</div><div class=\"line\">git commit -m &quot;pod&quot;</div><div class=\"line\">git push -u origin master</div></pre></td></tr></table></figure>\n<p>5.成功后搜索</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod search EMTest</div></pre></td></tr></table></figure>\n<p>6.如果搜索不出来 更新下cocoapods</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod setup</div></pre></td></tr></table></figure>\n<p>7.如果还是没有，一直显示</p>\n<blockquote>\n<p>[!] Unable to find a pod with name, author, summary, or description matching <code>EMTest</code></p>\n</blockquote>\n<p>执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm ~/Library/Caches/CocoaPods/search_index.json</div></pre></td></tr></table></figure>\n<p>在执行pod search就会重新搜索<br><img src=\"/img/2018:02:09_141205.jpg\" width=\"500\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-上传framework到Github\"><a href=\"#一-上传framework到Github\" class=\"headerlink\" title=\"一.上传framework到Github\"></a>一.上传framework到Github</h2><p>参考<a href=\"http://carryree.com/2018/02/08/uploadGithub/\" target=\"_blank\" rel=\"external\">打包framework上传到github</a></p>\n<h2 id=\"二-安装cocoapods的打包插件\"><a href=\"#二-安装cocoapods的打包插件\" class=\"headerlink\" title=\"二.安装cocoapods的打包插件\"></a>二.安装cocoapods的打包插件</h2><p>1.安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gem install cocoapods-packager</div></pre></td></tr></table></figure>\n<p>2.注册</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod trunk register xxxx@xx.com xxxx --verbose</div></pre></td></tr></table></figure>\n<p>xxxx@xx.com 为注册邮箱<br>xxxx 为用户名</p>\n<p>注册后收到一封邮件，复制邮件打开链接完成注册<br><img src=\"/img/2018:02:09_110201.jpg\" width=\"400\"></p>\n<p>3.查看注册信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod trunk me</div></pre></td></tr></table></figure>\n<h2 id=\"三-上传cocoa-pods\"><a href=\"#三-上传cocoa-pods\" class=\"headerlink\" title=\"三.上传cocoa pods\"></a>三.上传cocoa pods</h2><p>1.cd 到你的git本地目录</p>\n<p>2.在工程根目录初始化一个Podspec文件 最好与你项目同名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod spec create EMTest</div></pre></td></tr></table></figure>\n<p><img src=\"/img/2018:02:09_110302.jpg\" width=\"500\"></p>\n<p>3.配置自己的podspec文件(仅供参考)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div></pre></td><td class=\"code\"><pre><div class=\"line\">#</div><div class=\"line\">#  Be sure to run `pod spec lint EMTest.podspec&apos; to ensure this is a</div><div class=\"line\">#  valid spec and to remove all comments including this before submitting the spec.</div><div class=\"line\">#</div><div class=\"line\">#  To learn more about Podspec attributes see http://docs.cocoapods.org/specification.html</div><div class=\"line\">#  To see working Podspecs in the CocoaPods repo see https://github.com/CocoaPods/Specs/</div><div class=\"line\">#</div><div class=\"line\"></div><div class=\"line\">Pod::Spec.new do |s|</div><div class=\"line\"></div><div class=\"line\">  # ―――  Spec Metadata  ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class=\"line\">  #</div><div class=\"line\">  #  These will help people to find your library, and whilst it</div><div class=\"line\">  #  can feel like a chore to fill in it&apos;s definitely to your advantage. The</div><div class=\"line\">  #  summary should be tweet-length, and the description more in depth.</div><div class=\"line\">  #</div><div class=\"line\"></div><div class=\"line\">  s.name         = &quot;EMTest&quot;</div><div class=\"line\">  s.version      = &quot;1.0.0&quot;</div><div class=\"line\">  s.summary      = &quot;This is just test.&quot;</div><div class=\"line\"></div><div class=\"line\">  # This description is used to generate tags and improve search results.</div><div class=\"line\">  #   * Think: What does it do? Why did you write it? What is the focus?</div><div class=\"line\">  #   * Try to keep it short, snappy and to the point.</div><div class=\"line\">  #   * Write the description between the DESC delimiters below.</div><div class=\"line\">  #   * Finally, don&apos;t worry about the indent, CocoaPods strips it!</div><div class=\"line\">  s.description  = &apos;test for github, CarryRee&apos;</div><div class=\"line\"></div><div class=\"line\">  s.homepage     = &quot;http://www.emeet.ai&quot;</div><div class=\"line\">  # s.screenshots  = &quot;www.example.com/screenshots_1.gif&quot;, &quot;www.example.com/screenshots_2.gif&quot;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  # ―――  Spec License  ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class=\"line\">  #</div><div class=\"line\">  #  Licensing your code is important. See http://choosealicense.com for more info.</div><div class=\"line\">  #  CocoaPods will detect a license file if there is a named LICENSE*</div><div class=\"line\">  #  Popular ones are &apos;MIT&apos;, &apos;BSD&apos; and &apos;Apache License, Version 2.0&apos;.</div><div class=\"line\">  #</div><div class=\"line\"></div><div class=\"line\">  s.license      = &#123; :type =&gt; &quot;MIT&quot;, :file =&gt; &quot;LICENSE&quot; &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  # ――― Author Metadata  ――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class=\"line\">  #</div><div class=\"line\">  #  Specify the authors of the library, with email addresses. Email addresses</div><div class=\"line\">  #  of the authors are extracted from the SCM log. E.g. $ git log. CocoaPods also</div><div class=\"line\">  #  accepts just a name if you&apos;d rather not provide an email address.</div><div class=\"line\">  #</div><div class=\"line\">  #  Specify a social_media_url where others can refer to, for example a twitter</div><div class=\"line\">  #  profile URL.</div><div class=\"line\">  #</div><div class=\"line\"></div><div class=\"line\">  s.author             = &#123; &quot;CarryRee&quot; =&gt; &quot;63755364@qq.com&quot; &#125;</div><div class=\"line\">  # Or just: s.author    = &quot;CarryRee&quot;</div><div class=\"line\">  # s.authors            = &#123; &quot;CarryRee&quot; =&gt; &quot;63755364@qq.com&quot; &#125;</div><div class=\"line\">  # s.social_media_url   = &quot;http://twitter.com/CarryRee&quot;</div><div class=\"line\"></div><div class=\"line\">  # ――― Platform Specifics ――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class=\"line\">  #</div><div class=\"line\">  #  If this Pod runs only on iOS or OS X, then specify the platform and</div><div class=\"line\">  #  the deployment target. You can optionally include the target after the platform.</div><div class=\"line\">  #</div><div class=\"line\"></div><div class=\"line\">  s.platform     = :ios</div><div class=\"line\">  s.platform     = :ios, &quot;9.0&quot;</div><div class=\"line\"></div><div class=\"line\">  #  When using multiple platforms</div><div class=\"line\">  # s.ios.deployment_target = &quot;5.0&quot;</div><div class=\"line\">  # s.osx.deployment_target = &quot;10.7&quot;</div><div class=\"line\">  # s.watchos.deployment_target = &quot;2.0&quot;</div><div class=\"line\">  # s.tvos.deployment_target = &quot;9.0&quot;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  # ――― Source Location ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class=\"line\">  #</div><div class=\"line\">  #  Specify the location from where the source should be retrieved.</div><div class=\"line\">  #  Supports git, hg, bzr, svn and HTTP.</div><div class=\"line\">  #</div><div class=\"line\"></div><div class=\"line\">  s.source       = &#123; :git =&gt; &quot;https://github.com/CarryRee/EMTest.git&quot;, :tag =&gt; s.version.to_s  &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  # ――― Source Code ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class=\"line\">  #</div><div class=\"line\">  #  CocoaPods is smart about how it includes source code. For source files</div><div class=\"line\">  #  giving a folder will include any swift, h, m, mm, c &amp; cpp files.</div><div class=\"line\">  #  For header files it will include any header in the folder.</div><div class=\"line\">  #  Not including the public_header_files will make all headers public.</div><div class=\"line\">  #</div><div class=\"line\"></div><div class=\"line\">  #s.source_files  = &quot;Classes&quot;, &quot;Classes/**/*.&#123;h,m&#125;&quot;</div><div class=\"line\">  #s.exclude_files = &quot;Classes/Exclude&quot;</div><div class=\"line\">  s.vendored_frameworks = &apos;EMTest.framework&apos;</div><div class=\"line\"></div><div class=\"line\">  # s.public_header_files = &quot;Classes/**/*.h&quot;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  # ――― Resources ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class=\"line\">  #</div><div class=\"line\">  #  A list of resources included with the Pod. These are copied into the</div><div class=\"line\">  #  target bundle with a build phase script. Anything else will be cleaned.</div><div class=\"line\">  #  You can preserve files from being cleaned, please don&apos;t preserve</div><div class=\"line\">  #  non-essential files like tests, examples and documentation.</div><div class=\"line\">  #</div><div class=\"line\"></div><div class=\"line\">  # s.resource  = &quot;icon.png&quot;</div><div class=\"line\">  # s.resources = &quot;Resources/*.png&quot;</div><div class=\"line\"></div><div class=\"line\">  # s.preserve_paths = &quot;FilesToSave&quot;, &quot;MoreFilesToSave&quot;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  # ――― Project Linking ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class=\"line\">  #</div><div class=\"line\">  #  Link your library with frameworks, or libraries. Libraries do not include</div><div class=\"line\">  #  the lib prefix of their name.</div><div class=\"line\">  #</div><div class=\"line\"></div><div class=\"line\">  # s.framework  = &quot;SomeFramework&quot;</div><div class=\"line\">  # s.frameworks = &quot;SomeFramework&quot;, &quot;AnotherFramework&quot;</div><div class=\"line\"></div><div class=\"line\">  # s.library   = &quot;iconv&quot;</div><div class=\"line\">  # s.libraries = &quot;iconv&quot;, &quot;xml2&quot;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  # ――― Project Settings ――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class=\"line\">  #</div><div class=\"line\">  #  If your library depends on compiler flags you can set them in the xcconfig hash</div><div class=\"line\">  #  where they will only apply to your library. If you depend on other Podspecs</div><div class=\"line\">  #  you can include multiple dependencies to ensure it works.</div><div class=\"line\"></div><div class=\"line\">  s.requires_arc = true</div><div class=\"line\"></div><div class=\"line\">  # s.xcconfig = &#123; &quot;HEADER_SEARCH_PATHS&quot; =&gt; &quot;$(SDKROOT)/usr/include/libxml2&quot; &#125;</div><div class=\"line\">  # s.dependency &quot;JSONKit&quot;, &quot;~&gt; 1.4&quot;</div><div class=\"line\"></div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>3.验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod lib lint</div></pre></td></tr></table></figure>\n<p><img src=\"/img/2018:02:09_112103.jpg\" width=\"300\"></p>\n<p>4.提交cocoa pods (这个有点耐心, 需要会时间)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod trunk push EMTest.podspec</div></pre></td></tr></table></figure>\n<p><img src=\"/img/2018:02:09_113004.jpg\" width=\"500\"></p>\n<p>注意记得把.podspec也上传到Github中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add EMTest.podspec</div><div class=\"line\">git commit -m &quot;pod&quot;</div><div class=\"line\">git push -u origin master</div></pre></td></tr></table></figure>\n<p>5.成功后搜索</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod search EMTest</div></pre></td></tr></table></figure>\n<p>6.如果搜索不出来 更新下cocoapods</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod setup</div></pre></td></tr></table></figure>\n<p>7.如果还是没有，一直显示</p>\n<blockquote>\n<p>[!] Unable to find a pod with name, author, summary, or description matching <code>EMTest</code></p>\n</blockquote>\n<p>执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm ~/Library/Caches/CocoaPods/search_index.json</div></pre></td></tr></table></figure>\n<p>在执行pod search就会重新搜索<br><img src=\"/img/2018:02:09_141205.jpg\" width=\"500\"></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjgyhmkpv00010ecvx5nwvfpn","tag_id":"cjgyhmkpy00030ecv198jdltu","_id":"cjgyhmkq400080ecvsdk6k9vx"},{"post_id":"cjgyhmkq000040ecv6ewr7lr8","tag_id":"cjgyhmkq300070ecvawpb22zj","_id":"cjgyhmkq8000d0ecvbzniju4m"},{"post_id":"cjgyhmkq300060ecv70p3as5b","tag_id":"cjgyhmkq7000b0ecv8b5uglqj","_id":"cjgyhmkq9000f0ecv860cxqlz"},{"post_id":"cjgyhmkq6000a0ecvdpgvb2bs","tag_id":"cjgyhmkq8000e0ecvhlj94p6n","_id":"cjgyhmkq9000g0ecvtv6a5gzv"}],"Tag":[{"name":"动画 内存管理","_id":"cjgyhmkpy00030ecv198jdltu"},{"name":"静态库","_id":"cjgyhmkq300070ecvawpb22zj"},{"name":"内存管理 block","_id":"cjgyhmkq7000b0ecv8b5uglqj"},{"name":"Framework","_id":"cjgyhmkq8000e0ecvhlj94p6n"}]}}